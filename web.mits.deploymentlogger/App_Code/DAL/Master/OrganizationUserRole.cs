/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.5.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;
using DL_DAL.Master;

namespace DL_WEB.DAL.Master
{
    #region Enums

    [Serializable]
    public enum ActionTypes
    { 
        Insert = 1,
        Delete = 2
    }

    #endregion

    #region OrganizationRoleEntry

    [Serializable]
    public struct OrganizationRoleEntry
    { 
        public int OrganizationID;
        public int RoleID;
        public ActionTypes ActionType;

        public OrganizationRoleEntry(int iOrganizationID, int iRoleID, ActionTypes oActionType)
        {
            OrganizationID = iOrganizationID;
            RoleID = iRoleID;
            ActionType = oActionType;
        }
    }

    #endregion

    #region OrganizationUserRole
    
    public class OrganizationUserRole : SqlClientEntity
    {
        #region Properties

        #region Roles

        protected DataTable dtRoles = null;

        public DataTable Roles
        {
            get
            {
                if (null == dtRoles)
                {
                    Role oRole = new Role();
                    oRole.LoadAll();
                    dtRoles = oRole.DefaultView.Table;
                }
                return dtRoles;
            }
        }

        #endregion

        #region Organizations

        protected DataTable dtOrganizations = null;

        public DataTable Organizations
        {
            get 
            {
                if (null == dtOrganizations)
                {
                    Organization oOrganization = new Organization();
                    oOrganization.LoadAll();
                    dtOrganizations = oOrganization.DefaultView.Table;
                }

                return dtOrganizations;
            }
        }

        #endregion

        #endregion

        #region constructor

        public OrganizationUserRole()
        {
            base.ConnectionString = Master.DBConnectionString;

            this.QuerySource = "OrganizationUserRole";
            this.MappingName = "OrganizationUserRole";
        }

        #endregion

        #region LoadAll

        //=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
        }

        #endregion

        #region FlushData

        public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
        }

        #endregion

        #region Service Members

        #region Parameters
        protected class Parameters
		{
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RoleID
			{
				get
				{
					return new SqlParameter("@RoleID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OrganizationID
			{
				get
				{
					return new SqlParameter("@OrganizationID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OrganizationName
			{
				get
				{
					return new SqlParameter("@OrganizationName", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter RoleName
			{
				get
				{
					return new SqlParameter("@RoleName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter DatabaseID
			{
				get
				{
					return new SqlParameter("@DatabaseID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string UserID = "UserID";
            public const string RoleID = "RoleID";
            public const string OrganizationID = "OrganizationID";
            public const string OrganizationName = "OrganizationName";
            public const string RoleName = "RoleName";
            public const string DatabaseID = "DatabaseID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserID] = OrganizationUserRole.PropertyNames.UserID;
					ht[RoleID] = OrganizationUserRole.PropertyNames.RoleID;
					ht[OrganizationID] = OrganizationUserRole.PropertyNames.OrganizationID;
					ht[OrganizationName] = OrganizationUserRole.PropertyNames.OrganizationName;
					ht[RoleName] = OrganizationUserRole.PropertyNames.RoleName;
					ht[DatabaseID] = OrganizationUserRole.PropertyNames.DatabaseID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string UserID = "UserID";
            public const string RoleID = "RoleID";
            public const string OrganizationID = "OrganizationID";
            public const string OrganizationName = "OrganizationName";
            public const string RoleName = "RoleName";
            public const string DatabaseID = "DatabaseID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserID] = OrganizationUserRole.ColumnNames.UserID;
					ht[RoleID] = OrganizationUserRole.ColumnNames.RoleID;
					ht[OrganizationID] = OrganizationUserRole.ColumnNames.OrganizationID;
					ht[OrganizationName] = OrganizationUserRole.ColumnNames.OrganizationName;
					ht[RoleName] = OrganizationUserRole.ColumnNames.RoleName;
					ht[DatabaseID] = OrganizationUserRole.ColumnNames.DatabaseID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string UserID = "s_UserID";
            public const string RoleID = "s_RoleID";
            public const string OrganizationID = "s_OrganizationID";
            public const string OrganizationName = "s_OrganizationName";
            public const string RoleName = "s_RoleName";
            public const string DatabaseID = "s_DatabaseID";

		}
		#endregion	
		
		#region Properties
			public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual int RoleID
	    {
			get
	        {
				return base.Getint(ColumnNames.RoleID);
			}
			set
	        {
				base.Setint(ColumnNames.RoleID, value);
			}
		}

		public virtual int OrganizationID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrganizationID);
			}
			set
	        {
				base.Setint(ColumnNames.OrganizationID, value);
			}
		}

		public virtual string OrganizationName
	    {
			get
	        {
				return base.Getstring(ColumnNames.OrganizationName);
			}
			set
	        {
				base.Setstring(ColumnNames.OrganizationName, value);
			}
		}

		public virtual string RoleName
	    {
			get
	        {
				return base.Getstring(ColumnNames.RoleName);
			}
			set
	        {
				base.Setstring(ColumnNames.RoleName, value);
			}
		}

		public virtual int DatabaseID
	    {
			get
	        {
				return base.Getint(ColumnNames.DatabaseID);
			}
			set
	        {
				base.Setint(ColumnNames.DatabaseID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_RoleID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RoleID) ? string.Empty : base.GetintAsString(ColumnNames.RoleID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RoleID);
				else
					this.RoleID = base.SetintAsString(ColumnNames.RoleID, value);
			}
		}

		public virtual string s_OrganizationID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrganizationID) ? string.Empty : base.GetintAsString(ColumnNames.OrganizationID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrganizationID);
				else
					this.OrganizationID = base.SetintAsString(ColumnNames.OrganizationID, value);
			}
		}

		public virtual string s_OrganizationName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrganizationName) ? string.Empty : base.GetstringAsString(ColumnNames.OrganizationName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrganizationName);
				else
					this.OrganizationName = base.SetstringAsString(ColumnNames.OrganizationName, value);
			}
		}

		public virtual string s_RoleName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RoleName) ? string.Empty : base.GetstringAsString(ColumnNames.RoleName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RoleName);
				else
					this.RoleName = base.SetstringAsString(ColumnNames.RoleName, value);
			}
		}

		public virtual string s_DatabaseID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DatabaseID) ? string.Empty : base.GetintAsString(ColumnNames.DatabaseID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DatabaseID);
				else
					this.DatabaseID = base.SetintAsString(ColumnNames.DatabaseID, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RoleID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RoleID, Parameters.RoleID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrganizationID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrganizationID, Parameters.OrganizationID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrganizationName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrganizationName, Parameters.OrganizationName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RoleName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RoleName, Parameters.RoleName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DatabaseID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DatabaseID, Parameters.DatabaseID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter RoleID
		    {
				get
		        {
					if(_RoleID_W == null)
	        	    {
						_RoleID_W = TearOff.RoleID;
					}
					return _RoleID_W;
				}
			}

			public WhereParameter OrganizationID
		    {
				get
		        {
					if(_OrganizationID_W == null)
	        	    {
						_OrganizationID_W = TearOff.OrganizationID;
					}
					return _OrganizationID_W;
				}
			}

			public WhereParameter OrganizationName
		    {
				get
		        {
					if(_OrganizationName_W == null)
	        	    {
						_OrganizationName_W = TearOff.OrganizationName;
					}
					return _OrganizationName_W;
				}
			}

			public WhereParameter RoleName
		    {
				get
		        {
					if(_RoleName_W == null)
	        	    {
						_RoleName_W = TearOff.RoleName;
					}
					return _RoleName_W;
				}
			}

			public WhereParameter DatabaseID
		    {
				get
		        {
					if(_DatabaseID_W == null)
	        	    {
						_DatabaseID_W = TearOff.DatabaseID;
					}
					return _DatabaseID_W;
				}
			}

			private WhereParameter _UserID_W = null;
			private WhereParameter _RoleID_W = null;
			private WhereParameter _OrganizationID_W = null;
			private WhereParameter _OrganizationName_W = null;
			private WhereParameter _RoleName_W = null;
			private WhereParameter _DatabaseID_W = null;

			public void WhereClauseReset()
			{
				_UserID_W = null;
				_RoleID_W = null;
				_OrganizationID_W = null;
				_OrganizationName_W = null;
				_RoleName_W = null;
				_DatabaseID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RoleID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RoleID, Parameters.RoleID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrganizationID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrganizationID, Parameters.OrganizationID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrganizationName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrganizationName, Parameters.OrganizationName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RoleName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RoleName, Parameters.RoleName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DatabaseID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DatabaseID, Parameters.DatabaseID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter RoleID
		    {
				get
		        {
					if(_RoleID_W == null)
	        	    {
						_RoleID_W = TearOff.RoleID;
					}
					return _RoleID_W;
				}
			}

			public AggregateParameter OrganizationID
		    {
				get
		        {
					if(_OrganizationID_W == null)
	        	    {
						_OrganizationID_W = TearOff.OrganizationID;
					}
					return _OrganizationID_W;
				}
			}

			public AggregateParameter OrganizationName
		    {
				get
		        {
					if(_OrganizationName_W == null)
	        	    {
						_OrganizationName_W = TearOff.OrganizationName;
					}
					return _OrganizationName_W;
				}
			}

			public AggregateParameter RoleName
		    {
				get
		        {
					if(_RoleName_W == null)
	        	    {
						_RoleName_W = TearOff.RoleName;
					}
					return _RoleName_W;
				}
			}

			public AggregateParameter DatabaseID
		    {
				get
		        {
					if(_DatabaseID_W == null)
	        	    {
						_DatabaseID_W = TearOff.DatabaseID;
					}
					return _DatabaseID_W;
				}
			}

			private AggregateParameter _UserID_W = null;
			private AggregateParameter _RoleID_W = null;
			private AggregateParameter _OrganizationID_W = null;
			private AggregateParameter _OrganizationName_W = null;
			private AggregateParameter _RoleName_W = null;
			private AggregateParameter _DatabaseID_W = null;

			public void AggregateClauseReset()
			{
				_UserID_W = null;
				_RoleID_W = null;
				_OrganizationID_W = null;
				_OrganizationName_W = null;
				_RoleName_W = null;
				_DatabaseID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
        }

        #endregion

        #region LoadUserOrganizationRole

        public DataView LoadUserOrganizationRole(int iUserID)
        {
            Where.UserID.Value = iUserID;
            Query.Load();
            return this.DefaultView;
        }

        #endregion

        #region Methods working with session

        public DataView LoadUserOrganizationRole_Session(int iUserID, object UserRoles)
        {
            LoadUserOrganizationRole(iUserID);

            DataTable dt = this.DataTable.Copy();
            
            ArrayList oUserRoles = UserRoles as ArrayList;
            if(null != oUserRoles)
            {
                foreach (OrganizationRoleEntry oEntry in oUserRoles)
                {
                    if (ActionTypes.Insert == oEntry.ActionType)
                    {
                        DataRow dr = dt.NewRow();
                        dr["UserID"] = iUserID;
                        dr["RoleID"] = oEntry.RoleID;
                        dr["OrganizationID"] = oEntry.OrganizationID;
                        dr["OrganizationName"] = Organization.Instance.GetOrganizationName(oEntry.OrganizationID);
                        dr["RoleName"] = Role.Instance.GetRoleName(oEntry.RoleID);

                        dt.Rows.Add(dr);
                    }
                    else
                    {
                        DataRow[] drs = dt.Select(string.Format("RoleID = {0} AND OrganizationID = {1}", oEntry.RoleID, oEntry.OrganizationID));
                        if(drs.Length > 0)
                        {
                            dt.Rows.Remove(drs[0]);
                        }
                    }
                }
            }

            return dt.DefaultView;
        }

        #endregion

    }

    #endregion

}
