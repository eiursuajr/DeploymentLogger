
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.5.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DL_DAL.Client
{
	public abstract class _AddressBook : SqlClientEntity
	{
		public _AddressBook()
		{
			this.QuerySource = "AddressBook";
			this.MappingName = "AddressBook";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllAddressBook]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int EntryID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.EntryID, EntryID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAddressBookByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter EntryID
			{
				get
				{
					return new SqlParameter("@EntryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FirstName
			{
				get
				{
					return new SqlParameter("@FirstName", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter LastName
			{
				get
				{
					return new SqlParameter("@LastName", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter MiddleName
			{
				get
				{
					return new SqlParameter("@MiddleName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter JobTitle
			{
				get
				{
					return new SqlParameter("@JobTitle", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter Company
			{
				get
				{
					return new SqlParameter("@Company", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter BusinessAddress
			{
				get
				{
					return new SqlParameter("@BusinessAddress", SqlDbType.VarChar, 1024);
				}
			}
			
			public static SqlParameter HomeAddress
			{
				get
				{
					return new SqlParameter("@HomeAddress", SqlDbType.VarChar, 1024);
				}
			}
			
			public static SqlParameter HomePhone
			{
				get
				{
					return new SqlParameter("@HomePhone", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter WorkPhone
			{
				get
				{
					return new SqlParameter("@WorkPhone", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter PrimaryEmail
			{
				get
				{
					return new SqlParameter("@PrimaryEmail", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter SecondaryEmail
			{
				get
				{
					return new SqlParameter("@SecondaryEmail", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsShared
			{
				get
				{
					return new SqlParameter("@IsShared", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ProjectID
			{
				get
				{
					return new SqlParameter("@ProjectID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsApproved
			{
				get
				{
					return new SqlParameter("@IsApproved", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter GUID
			{
				get
				{
					return new SqlParameter("@GUID", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string EntryID = "EntryID";
            public const string FirstName = "FirstName";
            public const string LastName = "LastName";
            public const string MiddleName = "MiddleName";
            public const string JobTitle = "JobTitle";
            public const string Company = "Company";
            public const string BusinessAddress = "BusinessAddress";
            public const string HomeAddress = "HomeAddress";
            public const string HomePhone = "HomePhone";
            public const string WorkPhone = "WorkPhone";
            public const string PrimaryEmail = "PrimaryEmail";
            public const string SecondaryEmail = "SecondaryEmail";
            public const string UserID = "UserID";
            public const string IsShared = "IsShared";
            public const string ProjectID = "ProjectID";
            public const string IsApproved = "IsApproved";
            public const string GUID = "GUID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[EntryID] = _AddressBook.PropertyNames.EntryID;
					ht[FirstName] = _AddressBook.PropertyNames.FirstName;
					ht[LastName] = _AddressBook.PropertyNames.LastName;
					ht[MiddleName] = _AddressBook.PropertyNames.MiddleName;
					ht[JobTitle] = _AddressBook.PropertyNames.JobTitle;
					ht[Company] = _AddressBook.PropertyNames.Company;
					ht[BusinessAddress] = _AddressBook.PropertyNames.BusinessAddress;
					ht[HomeAddress] = _AddressBook.PropertyNames.HomeAddress;
					ht[HomePhone] = _AddressBook.PropertyNames.HomePhone;
					ht[WorkPhone] = _AddressBook.PropertyNames.WorkPhone;
					ht[PrimaryEmail] = _AddressBook.PropertyNames.PrimaryEmail;
					ht[SecondaryEmail] = _AddressBook.PropertyNames.SecondaryEmail;
					ht[UserID] = _AddressBook.PropertyNames.UserID;
					ht[IsShared] = _AddressBook.PropertyNames.IsShared;
					ht[ProjectID] = _AddressBook.PropertyNames.ProjectID;
					ht[IsApproved] = _AddressBook.PropertyNames.IsApproved;
					ht[GUID] = _AddressBook.PropertyNames.GUID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string EntryID = "EntryID";
            public const string FirstName = "FirstName";
            public const string LastName = "LastName";
            public const string MiddleName = "MiddleName";
            public const string JobTitle = "JobTitle";
            public const string Company = "Company";
            public const string BusinessAddress = "BusinessAddress";
            public const string HomeAddress = "HomeAddress";
            public const string HomePhone = "HomePhone";
            public const string WorkPhone = "WorkPhone";
            public const string PrimaryEmail = "PrimaryEmail";
            public const string SecondaryEmail = "SecondaryEmail";
            public const string UserID = "UserID";
            public const string IsShared = "IsShared";
            public const string ProjectID = "ProjectID";
            public const string IsApproved = "IsApproved";
            public const string GUID = "GUID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[EntryID] = _AddressBook.ColumnNames.EntryID;
					ht[FirstName] = _AddressBook.ColumnNames.FirstName;
					ht[LastName] = _AddressBook.ColumnNames.LastName;
					ht[MiddleName] = _AddressBook.ColumnNames.MiddleName;
					ht[JobTitle] = _AddressBook.ColumnNames.JobTitle;
					ht[Company] = _AddressBook.ColumnNames.Company;
					ht[BusinessAddress] = _AddressBook.ColumnNames.BusinessAddress;
					ht[HomeAddress] = _AddressBook.ColumnNames.HomeAddress;
					ht[HomePhone] = _AddressBook.ColumnNames.HomePhone;
					ht[WorkPhone] = _AddressBook.ColumnNames.WorkPhone;
					ht[PrimaryEmail] = _AddressBook.ColumnNames.PrimaryEmail;
					ht[SecondaryEmail] = _AddressBook.ColumnNames.SecondaryEmail;
					ht[UserID] = _AddressBook.ColumnNames.UserID;
					ht[IsShared] = _AddressBook.ColumnNames.IsShared;
					ht[ProjectID] = _AddressBook.ColumnNames.ProjectID;
					ht[IsApproved] = _AddressBook.ColumnNames.IsApproved;
					ht[GUID] = _AddressBook.ColumnNames.GUID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string EntryID = "s_EntryID";
            public const string FirstName = "s_FirstName";
            public const string LastName = "s_LastName";
            public const string MiddleName = "s_MiddleName";
            public const string JobTitle = "s_JobTitle";
            public const string Company = "s_Company";
            public const string BusinessAddress = "s_BusinessAddress";
            public const string HomeAddress = "s_HomeAddress";
            public const string HomePhone = "s_HomePhone";
            public const string WorkPhone = "s_WorkPhone";
            public const string PrimaryEmail = "s_PrimaryEmail";
            public const string SecondaryEmail = "s_SecondaryEmail";
            public const string UserID = "s_UserID";
            public const string IsShared = "s_IsShared";
            public const string ProjectID = "s_ProjectID";
            public const string IsApproved = "s_IsApproved";
            public const string GUID = "s_GUID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int EntryID
	    {
			get
	        {
				return base.Getint(ColumnNames.EntryID);
			}
			set
	        {
				base.Setint(ColumnNames.EntryID, value);
			}
		}

		public virtual string FirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstName, value);
			}
		}

		public virtual string LastName
	    {
			get
	        {
				return base.Getstring(ColumnNames.LastName);
			}
			set
	        {
				base.Setstring(ColumnNames.LastName, value);
			}
		}

		public virtual string MiddleName
	    {
			get
	        {
				return base.Getstring(ColumnNames.MiddleName);
			}
			set
	        {
				base.Setstring(ColumnNames.MiddleName, value);
			}
		}

		public virtual string JobTitle
	    {
			get
	        {
				return base.Getstring(ColumnNames.JobTitle);
			}
			set
	        {
				base.Setstring(ColumnNames.JobTitle, value);
			}
		}

		public virtual string Company
	    {
			get
	        {
				return base.Getstring(ColumnNames.Company);
			}
			set
	        {
				base.Setstring(ColumnNames.Company, value);
			}
		}

		public virtual string BusinessAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.BusinessAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.BusinessAddress, value);
			}
		}

		public virtual string HomeAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.HomeAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.HomeAddress, value);
			}
		}

		public virtual string HomePhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.HomePhone);
			}
			set
	        {
				base.Setstring(ColumnNames.HomePhone, value);
			}
		}

		public virtual string WorkPhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.WorkPhone);
			}
			set
	        {
				base.Setstring(ColumnNames.WorkPhone, value);
			}
		}

		public virtual string PrimaryEmail
	    {
			get
	        {
				return base.Getstring(ColumnNames.PrimaryEmail);
			}
			set
	        {
				base.Setstring(ColumnNames.PrimaryEmail, value);
			}
		}

		public virtual string SecondaryEmail
	    {
			get
	        {
				return base.Getstring(ColumnNames.SecondaryEmail);
			}
			set
	        {
				base.Setstring(ColumnNames.SecondaryEmail, value);
			}
		}

		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual bool IsShared
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsShared);
			}
			set
	        {
				base.Setbool(ColumnNames.IsShared, value);
			}
		}

		public virtual int ProjectID
	    {
			get
	        {
				return base.Getint(ColumnNames.ProjectID);
			}
			set
	        {
				base.Setint(ColumnNames.ProjectID, value);
			}
		}

		public virtual bool IsApproved
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsApproved);
			}
			set
	        {
				base.Setbool(ColumnNames.IsApproved, value);
			}
		}

		public virtual Guid GUID
	    {
			get
	        {
				return base.GetGuid(ColumnNames.GUID);
			}
			set
	        {
				base.SetGuid(ColumnNames.GUID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_EntryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EntryID) ? string.Empty : base.GetintAsString(ColumnNames.EntryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EntryID);
				else
					this.EntryID = base.SetintAsString(ColumnNames.EntryID, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstName);
				else
					this.FirstName = base.SetstringAsString(ColumnNames.FirstName, value);
			}
		}

		public virtual string s_LastName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastName) ? string.Empty : base.GetstringAsString(ColumnNames.LastName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastName);
				else
					this.LastName = base.SetstringAsString(ColumnNames.LastName, value);
			}
		}

		public virtual string s_MiddleName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MiddleName) ? string.Empty : base.GetstringAsString(ColumnNames.MiddleName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MiddleName);
				else
					this.MiddleName = base.SetstringAsString(ColumnNames.MiddleName, value);
			}
		}

		public virtual string s_JobTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobTitle) ? string.Empty : base.GetstringAsString(ColumnNames.JobTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobTitle);
				else
					this.JobTitle = base.SetstringAsString(ColumnNames.JobTitle, value);
			}
		}

		public virtual string s_Company
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Company) ? string.Empty : base.GetstringAsString(ColumnNames.Company);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Company);
				else
					this.Company = base.SetstringAsString(ColumnNames.Company, value);
			}
		}

		public virtual string s_BusinessAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BusinessAddress) ? string.Empty : base.GetstringAsString(ColumnNames.BusinessAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BusinessAddress);
				else
					this.BusinessAddress = base.SetstringAsString(ColumnNames.BusinessAddress, value);
			}
		}

		public virtual string s_HomeAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HomeAddress) ? string.Empty : base.GetstringAsString(ColumnNames.HomeAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HomeAddress);
				else
					this.HomeAddress = base.SetstringAsString(ColumnNames.HomeAddress, value);
			}
		}

		public virtual string s_HomePhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HomePhone) ? string.Empty : base.GetstringAsString(ColumnNames.HomePhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HomePhone);
				else
					this.HomePhone = base.SetstringAsString(ColumnNames.HomePhone, value);
			}
		}

		public virtual string s_WorkPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WorkPhone) ? string.Empty : base.GetstringAsString(ColumnNames.WorkPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WorkPhone);
				else
					this.WorkPhone = base.SetstringAsString(ColumnNames.WorkPhone, value);
			}
		}

		public virtual string s_PrimaryEmail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PrimaryEmail) ? string.Empty : base.GetstringAsString(ColumnNames.PrimaryEmail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PrimaryEmail);
				else
					this.PrimaryEmail = base.SetstringAsString(ColumnNames.PrimaryEmail, value);
			}
		}

		public virtual string s_SecondaryEmail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SecondaryEmail) ? string.Empty : base.GetstringAsString(ColumnNames.SecondaryEmail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SecondaryEmail);
				else
					this.SecondaryEmail = base.SetstringAsString(ColumnNames.SecondaryEmail, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_IsShared
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsShared) ? string.Empty : base.GetboolAsString(ColumnNames.IsShared);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsShared);
				else
					this.IsShared = base.SetboolAsString(ColumnNames.IsShared, value);
			}
		}

		public virtual string s_ProjectID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProjectID) ? string.Empty : base.GetintAsString(ColumnNames.ProjectID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProjectID);
				else
					this.ProjectID = base.SetintAsString(ColumnNames.ProjectID, value);
			}
		}

		public virtual string s_IsApproved
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsApproved) ? string.Empty : base.GetboolAsString(ColumnNames.IsApproved);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsApproved);
				else
					this.IsApproved = base.SetboolAsString(ColumnNames.IsApproved, value);
			}
		}

		public virtual string s_GUID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GUID) ? string.Empty : base.GetGuidAsString(ColumnNames.GUID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GUID);
				else
					this.GUID = base.SetGuidAsString(ColumnNames.GUID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter EntryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EntryID, Parameters.EntryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MiddleName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MiddleName, Parameters.MiddleName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobTitle, Parameters.JobTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Company
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Company, Parameters.Company);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BusinessAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BusinessAddress, Parameters.BusinessAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HomeAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HomeAddress, Parameters.HomeAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HomePhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HomePhone, Parameters.HomePhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WorkPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WorkPhone, Parameters.WorkPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PrimaryEmail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PrimaryEmail, Parameters.PrimaryEmail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SecondaryEmail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SecondaryEmail, Parameters.SecondaryEmail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsShared
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsShared, Parameters.IsShared);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProjectID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProjectID, Parameters.ProjectID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsApproved
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsApproved, Parameters.IsApproved);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GUID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GUID, Parameters.GUID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter EntryID
		    {
				get
		        {
					if(_EntryID_W == null)
	        	    {
						_EntryID_W = TearOff.EntryID;
					}
					return _EntryID_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public WhereParameter MiddleName
		    {
				get
		        {
					if(_MiddleName_W == null)
	        	    {
						_MiddleName_W = TearOff.MiddleName;
					}
					return _MiddleName_W;
				}
			}

			public WhereParameter JobTitle
		    {
				get
		        {
					if(_JobTitle_W == null)
	        	    {
						_JobTitle_W = TearOff.JobTitle;
					}
					return _JobTitle_W;
				}
			}

			public WhereParameter Company
		    {
				get
		        {
					if(_Company_W == null)
	        	    {
						_Company_W = TearOff.Company;
					}
					return _Company_W;
				}
			}

			public WhereParameter BusinessAddress
		    {
				get
		        {
					if(_BusinessAddress_W == null)
	        	    {
						_BusinessAddress_W = TearOff.BusinessAddress;
					}
					return _BusinessAddress_W;
				}
			}

			public WhereParameter HomeAddress
		    {
				get
		        {
					if(_HomeAddress_W == null)
	        	    {
						_HomeAddress_W = TearOff.HomeAddress;
					}
					return _HomeAddress_W;
				}
			}

			public WhereParameter HomePhone
		    {
				get
		        {
					if(_HomePhone_W == null)
	        	    {
						_HomePhone_W = TearOff.HomePhone;
					}
					return _HomePhone_W;
				}
			}

			public WhereParameter WorkPhone
		    {
				get
		        {
					if(_WorkPhone_W == null)
	        	    {
						_WorkPhone_W = TearOff.WorkPhone;
					}
					return _WorkPhone_W;
				}
			}

			public WhereParameter PrimaryEmail
		    {
				get
		        {
					if(_PrimaryEmail_W == null)
	        	    {
						_PrimaryEmail_W = TearOff.PrimaryEmail;
					}
					return _PrimaryEmail_W;
				}
			}

			public WhereParameter SecondaryEmail
		    {
				get
		        {
					if(_SecondaryEmail_W == null)
	        	    {
						_SecondaryEmail_W = TearOff.SecondaryEmail;
					}
					return _SecondaryEmail_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter IsShared
		    {
				get
		        {
					if(_IsShared_W == null)
	        	    {
						_IsShared_W = TearOff.IsShared;
					}
					return _IsShared_W;
				}
			}

			public WhereParameter ProjectID
		    {
				get
		        {
					if(_ProjectID_W == null)
	        	    {
						_ProjectID_W = TearOff.ProjectID;
					}
					return _ProjectID_W;
				}
			}

			public WhereParameter IsApproved
		    {
				get
		        {
					if(_IsApproved_W == null)
	        	    {
						_IsApproved_W = TearOff.IsApproved;
					}
					return _IsApproved_W;
				}
			}

			public WhereParameter GUID
		    {
				get
		        {
					if(_GUID_W == null)
	        	    {
						_GUID_W = TearOff.GUID;
					}
					return _GUID_W;
				}
			}

			private WhereParameter _EntryID_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _LastName_W = null;
			private WhereParameter _MiddleName_W = null;
			private WhereParameter _JobTitle_W = null;
			private WhereParameter _Company_W = null;
			private WhereParameter _BusinessAddress_W = null;
			private WhereParameter _HomeAddress_W = null;
			private WhereParameter _HomePhone_W = null;
			private WhereParameter _WorkPhone_W = null;
			private WhereParameter _PrimaryEmail_W = null;
			private WhereParameter _SecondaryEmail_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _IsShared_W = null;
			private WhereParameter _ProjectID_W = null;
			private WhereParameter _IsApproved_W = null;
			private WhereParameter _GUID_W = null;

			public void WhereClauseReset()
			{
				_EntryID_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_MiddleName_W = null;
				_JobTitle_W = null;
				_Company_W = null;
				_BusinessAddress_W = null;
				_HomeAddress_W = null;
				_HomePhone_W = null;
				_WorkPhone_W = null;
				_PrimaryEmail_W = null;
				_SecondaryEmail_W = null;
				_UserID_W = null;
				_IsShared_W = null;
				_ProjectID_W = null;
				_IsApproved_W = null;
				_GUID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter EntryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EntryID, Parameters.EntryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MiddleName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MiddleName, Parameters.MiddleName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobTitle, Parameters.JobTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Company
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Company, Parameters.Company);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BusinessAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BusinessAddress, Parameters.BusinessAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HomeAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HomeAddress, Parameters.HomeAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HomePhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HomePhone, Parameters.HomePhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WorkPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WorkPhone, Parameters.WorkPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PrimaryEmail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrimaryEmail, Parameters.PrimaryEmail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SecondaryEmail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SecondaryEmail, Parameters.SecondaryEmail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsShared
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsShared, Parameters.IsShared);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProjectID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProjectID, Parameters.ProjectID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsApproved
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsApproved, Parameters.IsApproved);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GUID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GUID, Parameters.GUID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter EntryID
		    {
				get
		        {
					if(_EntryID_W == null)
	        	    {
						_EntryID_W = TearOff.EntryID;
					}
					return _EntryID_W;
				}
			}

			public AggregateParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public AggregateParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public AggregateParameter MiddleName
		    {
				get
		        {
					if(_MiddleName_W == null)
	        	    {
						_MiddleName_W = TearOff.MiddleName;
					}
					return _MiddleName_W;
				}
			}

			public AggregateParameter JobTitle
		    {
				get
		        {
					if(_JobTitle_W == null)
	        	    {
						_JobTitle_W = TearOff.JobTitle;
					}
					return _JobTitle_W;
				}
			}

			public AggregateParameter Company
		    {
				get
		        {
					if(_Company_W == null)
	        	    {
						_Company_W = TearOff.Company;
					}
					return _Company_W;
				}
			}

			public AggregateParameter BusinessAddress
		    {
				get
		        {
					if(_BusinessAddress_W == null)
	        	    {
						_BusinessAddress_W = TearOff.BusinessAddress;
					}
					return _BusinessAddress_W;
				}
			}

			public AggregateParameter HomeAddress
		    {
				get
		        {
					if(_HomeAddress_W == null)
	        	    {
						_HomeAddress_W = TearOff.HomeAddress;
					}
					return _HomeAddress_W;
				}
			}

			public AggregateParameter HomePhone
		    {
				get
		        {
					if(_HomePhone_W == null)
	        	    {
						_HomePhone_W = TearOff.HomePhone;
					}
					return _HomePhone_W;
				}
			}

			public AggregateParameter WorkPhone
		    {
				get
		        {
					if(_WorkPhone_W == null)
	        	    {
						_WorkPhone_W = TearOff.WorkPhone;
					}
					return _WorkPhone_W;
				}
			}

			public AggregateParameter PrimaryEmail
		    {
				get
		        {
					if(_PrimaryEmail_W == null)
	        	    {
						_PrimaryEmail_W = TearOff.PrimaryEmail;
					}
					return _PrimaryEmail_W;
				}
			}

			public AggregateParameter SecondaryEmail
		    {
				get
		        {
					if(_SecondaryEmail_W == null)
	        	    {
						_SecondaryEmail_W = TearOff.SecondaryEmail;
					}
					return _SecondaryEmail_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter IsShared
		    {
				get
		        {
					if(_IsShared_W == null)
	        	    {
						_IsShared_W = TearOff.IsShared;
					}
					return _IsShared_W;
				}
			}

			public AggregateParameter ProjectID
		    {
				get
		        {
					if(_ProjectID_W == null)
	        	    {
						_ProjectID_W = TearOff.ProjectID;
					}
					return _ProjectID_W;
				}
			}

			public AggregateParameter IsApproved
		    {
				get
		        {
					if(_IsApproved_W == null)
	        	    {
						_IsApproved_W = TearOff.IsApproved;
					}
					return _IsApproved_W;
				}
			}

			public AggregateParameter GUID
		    {
				get
		        {
					if(_GUID_W == null)
	        	    {
						_GUID_W = TearOff.GUID;
					}
					return _GUID_W;
				}
			}

			private AggregateParameter _EntryID_W = null;
			private AggregateParameter _FirstName_W = null;
			private AggregateParameter _LastName_W = null;
			private AggregateParameter _MiddleName_W = null;
			private AggregateParameter _JobTitle_W = null;
			private AggregateParameter _Company_W = null;
			private AggregateParameter _BusinessAddress_W = null;
			private AggregateParameter _HomeAddress_W = null;
			private AggregateParameter _HomePhone_W = null;
			private AggregateParameter _WorkPhone_W = null;
			private AggregateParameter _PrimaryEmail_W = null;
			private AggregateParameter _SecondaryEmail_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _IsShared_W = null;
			private AggregateParameter _ProjectID_W = null;
			private AggregateParameter _IsApproved_W = null;
			private AggregateParameter _GUID_W = null;

			public void AggregateClauseReset()
			{
				_EntryID_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_MiddleName_W = null;
				_JobTitle_W = null;
				_Company_W = null;
				_BusinessAddress_W = null;
				_HomeAddress_W = null;
				_HomePhone_W = null;
				_WorkPhone_W = null;
				_PrimaryEmail_W = null;
				_SecondaryEmail_W = null;
				_UserID_W = null;
				_IsShared_W = null;
				_ProjectID_W = null;
				_IsApproved_W = null;
				_GUID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertAddressBook]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.EntryID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateAddressBook]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteAddressBook]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.EntryID);
			p.SourceColumn = ColumnNames.EntryID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.EntryID);
			p.SourceColumn = ColumnNames.EntryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstName);
			p.SourceColumn = ColumnNames.FirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastName);
			p.SourceColumn = ColumnNames.LastName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MiddleName);
			p.SourceColumn = ColumnNames.MiddleName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobTitle);
			p.SourceColumn = ColumnNames.JobTitle;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Company);
			p.SourceColumn = ColumnNames.Company;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BusinessAddress);
			p.SourceColumn = ColumnNames.BusinessAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HomeAddress);
			p.SourceColumn = ColumnNames.HomeAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HomePhone);
			p.SourceColumn = ColumnNames.HomePhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WorkPhone);
			p.SourceColumn = ColumnNames.WorkPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PrimaryEmail);
			p.SourceColumn = ColumnNames.PrimaryEmail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SecondaryEmail);
			p.SourceColumn = ColumnNames.SecondaryEmail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsShared);
			p.SourceColumn = ColumnNames.IsShared;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProjectID);
			p.SourceColumn = ColumnNames.ProjectID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsApproved);
			p.SourceColumn = ColumnNames.IsApproved;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GUID);
			p.SourceColumn = ColumnNames.GUID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
