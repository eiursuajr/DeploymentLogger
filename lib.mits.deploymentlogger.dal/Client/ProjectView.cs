/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.2)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DL_DAL.Client
{
    public class ProjectView : SqlClientEntity
    {
        public ProjectView()
        {
            this.QuerySource = "ProjectView";
            this.MappingName = "ProjectView";
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            return base.Query.Load();
        }

        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ProjectID
            {
                get
                {
                    return new SqlParameter("@ProjectID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter DepartmentID
            {
                get
                {
                    return new SqlParameter("@DepartmentID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Name
            {
                get
                {
                    return new SqlParameter("@Name", SqlDbType.VarChar, 255);
                }
            }

            public static SqlParameter Description
            {
                get
                {
                    return new SqlParameter("@Description", SqlDbType.VarChar, 1024);
                }
            }

            public static SqlParameter StartDate
            {
                get
                {
                    return new SqlParameter("@StartDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter FinishDate
            {
                get
                {
                    return new SqlParameter("@FinishDate", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter ProjectGroupID
            {
                get
                {
                    return new SqlParameter("@ProjectGroupID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ProjectGroupName
            {
                get
                {
                    return new SqlParameter("@ProjectGroupName", SqlDbType.VarChar, 255);
                }
            }

            public static SqlParameter ProjectCategoryID
            {
                get
                {
                    return new SqlParameter("@ProjectCategoryID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ProjectCategoryName
            {
                get
                {
                    return new SqlParameter("@ProjectCategoryName", SqlDbType.VarChar, 255);
                }
            }

            public static SqlParameter ProjectStatusID
            {
                get
                {
                    return new SqlParameter("@ProjectStatusID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ProjectStatusName
            {
                get
                {
                    return new SqlParameter("@ProjectStatusName", SqlDbType.VarChar, 255);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ProjectID = "ProjectID";
            public const string DepartmentID = "DepartmentID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string StartDate = "StartDate";
            public const string FinishDate = "FinishDate";
            public const string ProjectGroupID = "ProjectGroupID";
            public const string ProjectGroupName = "ProjectGroupName";
            public const string ProjectCategoryID = "ProjectCategoryID";
            public const string ProjectCategoryName = "ProjectCategoryName";
            public const string ProjectStatusID = "ProjectStatusID";
            public const string ProjectStatusName = "ProjectStatusName";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ProjectID] = ProjectView.PropertyNames.ProjectID;
                    ht[DepartmentID] = ProjectView.PropertyNames.DepartmentID;
                    ht[Name] = ProjectView.PropertyNames.Name;
                    ht[Description] = ProjectView.PropertyNames.Description;
                    ht[StartDate] = ProjectView.PropertyNames.StartDate;
                    ht[FinishDate] = ProjectView.PropertyNames.FinishDate;
                    ht[ProjectGroupID] = ProjectView.PropertyNames.ProjectGroupID;
                    ht[ProjectGroupName] = ProjectView.PropertyNames.ProjectGroupName;
                    ht[ProjectCategoryID] = ProjectView.PropertyNames.ProjectCategoryID;
                    ht[ProjectCategoryName] = ProjectView.PropertyNames.ProjectCategoryName;
                    ht[ProjectStatusID] = ProjectView.PropertyNames.ProjectStatusID;
                    ht[ProjectStatusName] = ProjectView.PropertyNames.ProjectStatusName;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ProjectID = "ProjectID";
            public const string DepartmentID = "DepartmentID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string StartDate = "StartDate";
            public const string FinishDate = "FinishDate";
            public const string ProjectGroupID = "ProjectGroupID";
            public const string ProjectGroupName = "ProjectGroupName";
            public const string ProjectCategoryID = "ProjectCategoryID";
            public const string ProjectCategoryName = "ProjectCategoryName";
            public const string ProjectStatusID = "ProjectStatusID";
            public const string ProjectStatusName = "ProjectStatusName";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ProjectID] = ProjectView.ColumnNames.ProjectID;
                    ht[DepartmentID] = ProjectView.ColumnNames.DepartmentID;
                    ht[Name] = ProjectView.ColumnNames.Name;
                    ht[Description] = ProjectView.ColumnNames.Description;
                    ht[StartDate] = ProjectView.ColumnNames.StartDate;
                    ht[FinishDate] = ProjectView.ColumnNames.FinishDate;
                    ht[ProjectGroupID] = ProjectView.ColumnNames.ProjectGroupID;
                    ht[ProjectGroupName] = ProjectView.ColumnNames.ProjectGroupName;
                    ht[ProjectCategoryID] = ProjectView.ColumnNames.ProjectCategoryID;
                    ht[ProjectCategoryName] = ProjectView.ColumnNames.ProjectCategoryName;
                    ht[ProjectStatusID] = ProjectView.ColumnNames.ProjectStatusID;
                    ht[ProjectStatusName] = ProjectView.ColumnNames.ProjectStatusName;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ProjectID = "s_ProjectID";
            public const string DepartmentID = "s_DepartmentID";
            public const string Name = "s_Name";
            public const string Description = "s_Description";
            public const string StartDate = "s_StartDate";
            public const string FinishDate = "s_FinishDate";
            public const string ProjectGroupID = "s_ProjectGroupID";
            public const string ProjectGroupName = "s_ProjectGroupName";
            public const string ProjectCategoryID = "s_ProjectCategoryID";
            public const string ProjectCategoryName = "s_ProjectCategoryName";
            public const string ProjectStatusID = "s_ProjectStatusID";
            public const string ProjectStatusName = "s_ProjectStatusName";

        }
        #endregion

        #region Properties
        public virtual int ProjectID
        {
            get
            {
                return base.Getint(ColumnNames.ProjectID);
            }
            set
            {
                base.Setint(ColumnNames.ProjectID, value);
            }
        }

        public virtual int DepartmentID
        {
            get
            {
                return base.Getint(ColumnNames.DepartmentID);
            }
            set
            {
                base.Setint(ColumnNames.DepartmentID, value);
            }
        }

        public virtual string Name
        {
            get
            {
                return base.Getstring(ColumnNames.Name);
            }
            set
            {
                base.Setstring(ColumnNames.Name, value);
            }
        }

        public virtual string Description
        {
            get
            {
                return base.Getstring(ColumnNames.Description);
            }
            set
            {
                base.Setstring(ColumnNames.Description, value);
            }
        }

        public virtual DateTime StartDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.StartDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.StartDate, value);
            }
        }

        public virtual DateTime FinishDate
        {
            get
            {
                return base.GetDateTime(ColumnNames.FinishDate);
            }
            set
            {
                base.SetDateTime(ColumnNames.FinishDate, value);
            }
        }

        public virtual int ProjectGroupID
        {
            get
            {
                return base.Getint(ColumnNames.ProjectGroupID);
            }
            set
            {
                base.Setint(ColumnNames.ProjectGroupID, value);
            }
        }

        public virtual string ProjectGroupName
        {
            get
            {
                return base.Getstring(ColumnNames.ProjectGroupName);
            }
            set
            {
                base.Setstring(ColumnNames.ProjectGroupName, value);
            }
        }

        public virtual int ProjectCategoryID
        {
            get
            {
                return base.Getint(ColumnNames.ProjectCategoryID);
            }
            set
            {
                base.Setint(ColumnNames.ProjectCategoryID, value);
            }
        }

        public virtual string ProjectCategoryName
        {
            get
            {
                return base.Getstring(ColumnNames.ProjectCategoryName);
            }
            set
            {
                base.Setstring(ColumnNames.ProjectCategoryName, value);
            }
        }

        public virtual int ProjectStatusID
        {
            get
            {
                return base.Getint(ColumnNames.ProjectStatusID);
            }
            set
            {
                base.Setint(ColumnNames.ProjectStatusID, value);
            }
        }

        public virtual string ProjectStatusName
        {
            get
            {
                return base.Getstring(ColumnNames.ProjectStatusName);
            }
            set
            {
                base.Setstring(ColumnNames.ProjectStatusName, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ProjectID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ProjectID) ? string.Empty : base.GetintAsString(ColumnNames.ProjectID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ProjectID);
                else
                    this.ProjectID = base.SetintAsString(ColumnNames.ProjectID, value);
            }
        }

        public virtual string s_DepartmentID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DepartmentID) ? string.Empty : base.GetintAsString(ColumnNames.DepartmentID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DepartmentID);
                else
                    this.DepartmentID = base.SetintAsString(ColumnNames.DepartmentID, value);
            }
        }

        public virtual string s_Name
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Name);
                else
                    this.Name = base.SetstringAsString(ColumnNames.Name, value);
            }
        }

        public virtual string s_Description
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Description);
                else
                    this.Description = base.SetstringAsString(ColumnNames.Description, value);
            }
        }

        public virtual string s_StartDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.StartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.StartDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.StartDate);
                else
                    this.StartDate = base.SetDateTimeAsString(ColumnNames.StartDate, value);
            }
        }

        public virtual string s_FinishDate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FinishDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FinishDate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FinishDate);
                else
                    this.FinishDate = base.SetDateTimeAsString(ColumnNames.FinishDate, value);
            }
        }

        public virtual string s_ProjectGroupID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ProjectGroupID) ? string.Empty : base.GetintAsString(ColumnNames.ProjectGroupID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ProjectGroupID);
                else
                    this.ProjectGroupID = base.SetintAsString(ColumnNames.ProjectGroupID, value);
            }
        }

        public virtual string s_ProjectGroupName
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ProjectGroupName) ? string.Empty : base.GetstringAsString(ColumnNames.ProjectGroupName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ProjectGroupName);
                else
                    this.ProjectGroupName = base.SetstringAsString(ColumnNames.ProjectGroupName, value);
            }
        }

        public virtual string s_ProjectCategoryID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ProjectCategoryID) ? string.Empty : base.GetintAsString(ColumnNames.ProjectCategoryID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ProjectCategoryID);
                else
                    this.ProjectCategoryID = base.SetintAsString(ColumnNames.ProjectCategoryID, value);
            }
        }

        public virtual string s_ProjectCategoryName
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ProjectCategoryName) ? string.Empty : base.GetstringAsString(ColumnNames.ProjectCategoryName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ProjectCategoryName);
                else
                    this.ProjectCategoryName = base.SetstringAsString(ColumnNames.ProjectCategoryName, value);
            }
        }

        public virtual string s_ProjectStatusID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ProjectStatusID) ? string.Empty : base.GetintAsString(ColumnNames.ProjectStatusID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ProjectStatusID);
                else
                    this.ProjectStatusID = base.SetintAsString(ColumnNames.ProjectStatusID, value);
            }
        }

        public virtual string s_ProjectStatusName
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ProjectStatusName) ? string.Empty : base.GetstringAsString(ColumnNames.ProjectStatusName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ProjectStatusName);
                else
                    this.ProjectStatusName = base.SetstringAsString(ColumnNames.ProjectStatusName, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ProjectID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ProjectID, Parameters.ProjectID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DepartmentID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DepartmentID, Parameters.DepartmentID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Name
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Description
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter StartDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.StartDate, Parameters.StartDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FinishDate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FinishDate, Parameters.FinishDate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ProjectGroupID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ProjectGroupID, Parameters.ProjectGroupID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ProjectGroupName
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ProjectGroupName, Parameters.ProjectGroupName);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ProjectCategoryID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ProjectCategoryID, Parameters.ProjectCategoryID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ProjectCategoryName
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ProjectCategoryName, Parameters.ProjectCategoryName);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ProjectStatusID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ProjectStatusID, Parameters.ProjectStatusID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ProjectStatusName
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ProjectStatusName, Parameters.ProjectStatusName);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ProjectID
            {
                get
                {
                    if (_ProjectID_W == null)
                    {
                        _ProjectID_W = TearOff.ProjectID;
                    }
                    return _ProjectID_W;
                }
            }

            public WhereParameter DepartmentID
            {
                get
                {
                    if (_DepartmentID_W == null)
                    {
                        _DepartmentID_W = TearOff.DepartmentID;
                    }
                    return _DepartmentID_W;
                }
            }

            public WhereParameter Name
            {
                get
                {
                    if (_Name_W == null)
                    {
                        _Name_W = TearOff.Name;
                    }
                    return _Name_W;
                }
            }

            public WhereParameter Description
            {
                get
                {
                    if (_Description_W == null)
                    {
                        _Description_W = TearOff.Description;
                    }
                    return _Description_W;
                }
            }

            public WhereParameter StartDate
            {
                get
                {
                    if (_StartDate_W == null)
                    {
                        _StartDate_W = TearOff.StartDate;
                    }
                    return _StartDate_W;
                }
            }

            public WhereParameter FinishDate
            {
                get
                {
                    if (_FinishDate_W == null)
                    {
                        _FinishDate_W = TearOff.FinishDate;
                    }
                    return _FinishDate_W;
                }
            }

            public WhereParameter ProjectGroupID
            {
                get
                {
                    if (_ProjectGroupID_W == null)
                    {
                        _ProjectGroupID_W = TearOff.ProjectGroupID;
                    }
                    return _ProjectGroupID_W;
                }
            }

            public WhereParameter ProjectGroupName
            {
                get
                {
                    if (_ProjectGroupName_W == null)
                    {
                        _ProjectGroupName_W = TearOff.ProjectGroupName;
                    }
                    return _ProjectGroupName_W;
                }
            }

            public WhereParameter ProjectCategoryID
            {
                get
                {
                    if (_ProjectCategoryID_W == null)
                    {
                        _ProjectCategoryID_W = TearOff.ProjectCategoryID;
                    }
                    return _ProjectCategoryID_W;
                }
            }

            public WhereParameter ProjectCategoryName
            {
                get
                {
                    if (_ProjectCategoryName_W == null)
                    {
                        _ProjectCategoryName_W = TearOff.ProjectCategoryName;
                    }
                    return _ProjectCategoryName_W;
                }
            }

            public WhereParameter ProjectStatusID
            {
                get
                {
                    if (_ProjectStatusID_W == null)
                    {
                        _ProjectStatusID_W = TearOff.ProjectStatusID;
                    }
                    return _ProjectStatusID_W;
                }
            }

            public WhereParameter ProjectStatusName
            {
                get
                {
                    if (_ProjectStatusName_W == null)
                    {
                        _ProjectStatusName_W = TearOff.ProjectStatusName;
                    }
                    return _ProjectStatusName_W;
                }
            }

            private WhereParameter _ProjectID_W = null;
            private WhereParameter _DepartmentID_W = null;
            private WhereParameter _Name_W = null;
            private WhereParameter _Description_W = null;
            private WhereParameter _StartDate_W = null;
            private WhereParameter _FinishDate_W = null;
            private WhereParameter _ProjectGroupID_W = null;
            private WhereParameter _ProjectGroupName_W = null;
            private WhereParameter _ProjectCategoryID_W = null;
            private WhereParameter _ProjectCategoryName_W = null;
            private WhereParameter _ProjectStatusID_W = null;
            private WhereParameter _ProjectStatusName_W = null;

            public void WhereClauseReset()
            {
                _ProjectID_W = null;
                _DepartmentID_W = null;
                _Name_W = null;
                _Description_W = null;
                _StartDate_W = null;
                _FinishDate_W = null;
                _ProjectGroupID_W = null;
                _ProjectGroupName_W = null;
                _ProjectCategoryID_W = null;
                _ProjectCategoryName_W = null;
                _ProjectStatusID_W = null;
                _ProjectStatusName_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ProjectID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProjectID, Parameters.ProjectID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DepartmentID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepartmentID, Parameters.DepartmentID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Name
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Description
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter StartDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.StartDate, Parameters.StartDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FinishDate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FinishDate, Parameters.FinishDate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ProjectGroupID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProjectGroupID, Parameters.ProjectGroupID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ProjectGroupName
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProjectGroupName, Parameters.ProjectGroupName);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ProjectCategoryID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProjectCategoryID, Parameters.ProjectCategoryID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ProjectCategoryName
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProjectCategoryName, Parameters.ProjectCategoryName);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ProjectStatusID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProjectStatusID, Parameters.ProjectStatusID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ProjectStatusName
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProjectStatusName, Parameters.ProjectStatusName);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ProjectID
            {
                get
                {
                    if (_ProjectID_W == null)
                    {
                        _ProjectID_W = TearOff.ProjectID;
                    }
                    return _ProjectID_W;
                }
            }

            public AggregateParameter DepartmentID
            {
                get
                {
                    if (_DepartmentID_W == null)
                    {
                        _DepartmentID_W = TearOff.DepartmentID;
                    }
                    return _DepartmentID_W;
                }
            }

            public AggregateParameter Name
            {
                get
                {
                    if (_Name_W == null)
                    {
                        _Name_W = TearOff.Name;
                    }
                    return _Name_W;
                }
            }

            public AggregateParameter Description
            {
                get
                {
                    if (_Description_W == null)
                    {
                        _Description_W = TearOff.Description;
                    }
                    return _Description_W;
                }
            }

            public AggregateParameter StartDate
            {
                get
                {
                    if (_StartDate_W == null)
                    {
                        _StartDate_W = TearOff.StartDate;
                    }
                    return _StartDate_W;
                }
            }

            public AggregateParameter FinishDate
            {
                get
                {
                    if (_FinishDate_W == null)
                    {
                        _FinishDate_W = TearOff.FinishDate;
                    }
                    return _FinishDate_W;
                }
            }

            public AggregateParameter ProjectGroupID
            {
                get
                {
                    if (_ProjectGroupID_W == null)
                    {
                        _ProjectGroupID_W = TearOff.ProjectGroupID;
                    }
                    return _ProjectGroupID_W;
                }
            }

            public AggregateParameter ProjectGroupName
            {
                get
                {
                    if (_ProjectGroupName_W == null)
                    {
                        _ProjectGroupName_W = TearOff.ProjectGroupName;
                    }
                    return _ProjectGroupName_W;
                }
            }

            public AggregateParameter ProjectCategoryID
            {
                get
                {
                    if (_ProjectCategoryID_W == null)
                    {
                        _ProjectCategoryID_W = TearOff.ProjectCategoryID;
                    }
                    return _ProjectCategoryID_W;
                }
            }

            public AggregateParameter ProjectCategoryName
            {
                get
                {
                    if (_ProjectCategoryName_W == null)
                    {
                        _ProjectCategoryName_W = TearOff.ProjectCategoryName;
                    }
                    return _ProjectCategoryName_W;
                }
            }

            public AggregateParameter ProjectStatusID
            {
                get
                {
                    if (_ProjectStatusID_W == null)
                    {
                        _ProjectStatusID_W = TearOff.ProjectStatusID;
                    }
                    return _ProjectStatusID_W;
                }
            }

            public AggregateParameter ProjectStatusName
            {
                get
                {
                    if (_ProjectStatusName_W == null)
                    {
                        _ProjectStatusName_W = TearOff.ProjectStatusName;
                    }
                    return _ProjectStatusName_W;
                }
            }

            private AggregateParameter _ProjectID_W = null;
            private AggregateParameter _DepartmentID_W = null;
            private AggregateParameter _Name_W = null;
            private AggregateParameter _Description_W = null;
            private AggregateParameter _StartDate_W = null;
            private AggregateParameter _FinishDate_W = null;
            private AggregateParameter _ProjectGroupID_W = null;
            private AggregateParameter _ProjectGroupName_W = null;
            private AggregateParameter _ProjectCategoryID_W = null;
            private AggregateParameter _ProjectCategoryName_W = null;
            private AggregateParameter _ProjectStatusID_W = null;
            private AggregateParameter _ProjectStatusName_W = null;

            public void AggregateClauseReset()
            {
                _ProjectID_W = null;
                _DepartmentID_W = null;
                _Name_W = null;
                _Description_W = null;
                _StartDate_W = null;
                _FinishDate_W = null;
                _ProjectGroupID_W = null;
                _ProjectGroupName_W = null;
                _ProjectCategoryID_W = null;
                _ProjectCategoryName_W = null;
                _ProjectStatusID_W = null;
                _ProjectStatusName_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {
            return null;
        }

        protected override IDbCommand GetUpdateCommand()
        {
            return null;
        }

        protected override IDbCommand GetDeleteCommand()
        {
            return null;
        }
    }
}


