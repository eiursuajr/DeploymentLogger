
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.5.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DL_DAL.Client
{
	public abstract class _NotificationType : SqlClientEntity
	{
		public _NotificationType()
		{
			this.QuerySource = "NotificationType";
			this.MappingName = "NotificationType";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllNotificationType]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int NotificationTypeID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.NotificationTypeID, NotificationTypeID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadNotificationTypeByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter NotificationTypeID
			{
				get
				{
					return new SqlParameter("@NotificationTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter Description
			{
				get
				{
					return new SqlParameter("@Description", SqlDbType.VarChar, 1024);
				}
			}
			
			public static SqlParameter ProcessingAssemblyName
			{
				get
				{
					return new SqlParameter("@ProcessingAssemblyName", SqlDbType.VarChar, 1024);
				}
			}
			
			public static SqlParameter ProcessingClassName
			{
				get
				{
					return new SqlParameter("@ProcessingClassName", SqlDbType.VarChar, 1024);
				}
			}
			
			public static SqlParameter ProcessingProcedureName
			{
				get
				{
					return new SqlParameter("@ProcessingProcedureName", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter NotificationEmailDefaultHeader
			{
				get
				{
					return new SqlParameter("@NotificationEmailDefaultHeader", SqlDbType.VarChar, 1024);
				}
			}
			
			public static SqlParameter NotificationEmailDefaultDescription
			{
				get
				{
					return new SqlParameter("@NotificationEmailDefaultDescription", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter IsClientUpdate
			{
				get
				{
					return new SqlParameter("@IsClientUpdate", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string NotificationTypeID = "NotificationTypeID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string ProcessingAssemblyName = "ProcessingAssemblyName";
            public const string ProcessingClassName = "ProcessingClassName";
            public const string ProcessingProcedureName = "ProcessingProcedureName";
            public const string NotificationEmailDefaultHeader = "NotificationEmailDefaultHeader";
            public const string NotificationEmailDefaultDescription = "NotificationEmailDefaultDescription";
            public const string IsClientUpdate = "IsClientUpdate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[NotificationTypeID] = _NotificationType.PropertyNames.NotificationTypeID;
					ht[Name] = _NotificationType.PropertyNames.Name;
					ht[Description] = _NotificationType.PropertyNames.Description;
					ht[ProcessingAssemblyName] = _NotificationType.PropertyNames.ProcessingAssemblyName;
					ht[ProcessingClassName] = _NotificationType.PropertyNames.ProcessingClassName;
					ht[ProcessingProcedureName] = _NotificationType.PropertyNames.ProcessingProcedureName;
					ht[NotificationEmailDefaultHeader] = _NotificationType.PropertyNames.NotificationEmailDefaultHeader;
					ht[NotificationEmailDefaultDescription] = _NotificationType.PropertyNames.NotificationEmailDefaultDescription;
					ht[IsClientUpdate] = _NotificationType.PropertyNames.IsClientUpdate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string NotificationTypeID = "NotificationTypeID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string ProcessingAssemblyName = "ProcessingAssemblyName";
            public const string ProcessingClassName = "ProcessingClassName";
            public const string ProcessingProcedureName = "ProcessingProcedureName";
            public const string NotificationEmailDefaultHeader = "NotificationEmailDefaultHeader";
            public const string NotificationEmailDefaultDescription = "NotificationEmailDefaultDescription";
            public const string IsClientUpdate = "IsClientUpdate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[NotificationTypeID] = _NotificationType.ColumnNames.NotificationTypeID;
					ht[Name] = _NotificationType.ColumnNames.Name;
					ht[Description] = _NotificationType.ColumnNames.Description;
					ht[ProcessingAssemblyName] = _NotificationType.ColumnNames.ProcessingAssemblyName;
					ht[ProcessingClassName] = _NotificationType.ColumnNames.ProcessingClassName;
					ht[ProcessingProcedureName] = _NotificationType.ColumnNames.ProcessingProcedureName;
					ht[NotificationEmailDefaultHeader] = _NotificationType.ColumnNames.NotificationEmailDefaultHeader;
					ht[NotificationEmailDefaultDescription] = _NotificationType.ColumnNames.NotificationEmailDefaultDescription;
					ht[IsClientUpdate] = _NotificationType.ColumnNames.IsClientUpdate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string NotificationTypeID = "s_NotificationTypeID";
            public const string Name = "s_Name";
            public const string Description = "s_Description";
            public const string ProcessingAssemblyName = "s_ProcessingAssemblyName";
            public const string ProcessingClassName = "s_ProcessingClassName";
            public const string ProcessingProcedureName = "s_ProcessingProcedureName";
            public const string NotificationEmailDefaultHeader = "s_NotificationEmailDefaultHeader";
            public const string NotificationEmailDefaultDescription = "s_NotificationEmailDefaultDescription";
            public const string IsClientUpdate = "s_IsClientUpdate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int NotificationTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.NotificationTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.NotificationTypeID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string Description
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description);
			}
			set
	        {
				base.Setstring(ColumnNames.Description, value);
			}
		}

		public virtual string ProcessingAssemblyName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ProcessingAssemblyName);
			}
			set
	        {
				base.Setstring(ColumnNames.ProcessingAssemblyName, value);
			}
		}

		public virtual string ProcessingClassName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ProcessingClassName);
			}
			set
	        {
				base.Setstring(ColumnNames.ProcessingClassName, value);
			}
		}

		public virtual string ProcessingProcedureName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ProcessingProcedureName);
			}
			set
	        {
				base.Setstring(ColumnNames.ProcessingProcedureName, value);
			}
		}

		public virtual string NotificationEmailDefaultHeader
	    {
			get
	        {
				return base.Getstring(ColumnNames.NotificationEmailDefaultHeader);
			}
			set
	        {
				base.Setstring(ColumnNames.NotificationEmailDefaultHeader, value);
			}
		}

		public virtual string NotificationEmailDefaultDescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.NotificationEmailDefaultDescription);
			}
			set
	        {
				base.Setstring(ColumnNames.NotificationEmailDefaultDescription, value);
			}
		}

		public virtual bool IsClientUpdate
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsClientUpdate);
			}
			set
	        {
				base.Setbool(ColumnNames.IsClientUpdate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_NotificationTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotificationTypeID) ? string.Empty : base.GetintAsString(ColumnNames.NotificationTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotificationTypeID);
				else
					this.NotificationTypeID = base.SetintAsString(ColumnNames.NotificationTypeID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description);
				else
					this.Description = base.SetstringAsString(ColumnNames.Description, value);
			}
		}

		public virtual string s_ProcessingAssemblyName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProcessingAssemblyName) ? string.Empty : base.GetstringAsString(ColumnNames.ProcessingAssemblyName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProcessingAssemblyName);
				else
					this.ProcessingAssemblyName = base.SetstringAsString(ColumnNames.ProcessingAssemblyName, value);
			}
		}

		public virtual string s_ProcessingClassName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProcessingClassName) ? string.Empty : base.GetstringAsString(ColumnNames.ProcessingClassName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProcessingClassName);
				else
					this.ProcessingClassName = base.SetstringAsString(ColumnNames.ProcessingClassName, value);
			}
		}

		public virtual string s_ProcessingProcedureName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProcessingProcedureName) ? string.Empty : base.GetstringAsString(ColumnNames.ProcessingProcedureName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProcessingProcedureName);
				else
					this.ProcessingProcedureName = base.SetstringAsString(ColumnNames.ProcessingProcedureName, value);
			}
		}

		public virtual string s_NotificationEmailDefaultHeader
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotificationEmailDefaultHeader) ? string.Empty : base.GetstringAsString(ColumnNames.NotificationEmailDefaultHeader);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotificationEmailDefaultHeader);
				else
					this.NotificationEmailDefaultHeader = base.SetstringAsString(ColumnNames.NotificationEmailDefaultHeader, value);
			}
		}

		public virtual string s_NotificationEmailDefaultDescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotificationEmailDefaultDescription) ? string.Empty : base.GetstringAsString(ColumnNames.NotificationEmailDefaultDescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotificationEmailDefaultDescription);
				else
					this.NotificationEmailDefaultDescription = base.SetstringAsString(ColumnNames.NotificationEmailDefaultDescription, value);
			}
		}

		public virtual string s_IsClientUpdate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsClientUpdate) ? string.Empty : base.GetboolAsString(ColumnNames.IsClientUpdate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsClientUpdate);
				else
					this.IsClientUpdate = base.SetboolAsString(ColumnNames.IsClientUpdate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter NotificationTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotificationTypeID, Parameters.NotificationTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProcessingAssemblyName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProcessingAssemblyName, Parameters.ProcessingAssemblyName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProcessingClassName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProcessingClassName, Parameters.ProcessingClassName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProcessingProcedureName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProcessingProcedureName, Parameters.ProcessingProcedureName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotificationEmailDefaultHeader
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotificationEmailDefaultHeader, Parameters.NotificationEmailDefaultHeader);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotificationEmailDefaultDescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotificationEmailDefaultDescription, Parameters.NotificationEmailDefaultDescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsClientUpdate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsClientUpdate, Parameters.IsClientUpdate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter NotificationTypeID
		    {
				get
		        {
					if(_NotificationTypeID_W == null)
	        	    {
						_NotificationTypeID_W = TearOff.NotificationTypeID;
					}
					return _NotificationTypeID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public WhereParameter ProcessingAssemblyName
		    {
				get
		        {
					if(_ProcessingAssemblyName_W == null)
	        	    {
						_ProcessingAssemblyName_W = TearOff.ProcessingAssemblyName;
					}
					return _ProcessingAssemblyName_W;
				}
			}

			public WhereParameter ProcessingClassName
		    {
				get
		        {
					if(_ProcessingClassName_W == null)
	        	    {
						_ProcessingClassName_W = TearOff.ProcessingClassName;
					}
					return _ProcessingClassName_W;
				}
			}

			public WhereParameter ProcessingProcedureName
		    {
				get
		        {
					if(_ProcessingProcedureName_W == null)
	        	    {
						_ProcessingProcedureName_W = TearOff.ProcessingProcedureName;
					}
					return _ProcessingProcedureName_W;
				}
			}

			public WhereParameter NotificationEmailDefaultHeader
		    {
				get
		        {
					if(_NotificationEmailDefaultHeader_W == null)
	        	    {
						_NotificationEmailDefaultHeader_W = TearOff.NotificationEmailDefaultHeader;
					}
					return _NotificationEmailDefaultHeader_W;
				}
			}

			public WhereParameter NotificationEmailDefaultDescription
		    {
				get
		        {
					if(_NotificationEmailDefaultDescription_W == null)
	        	    {
						_NotificationEmailDefaultDescription_W = TearOff.NotificationEmailDefaultDescription;
					}
					return _NotificationEmailDefaultDescription_W;
				}
			}

			public WhereParameter IsClientUpdate
		    {
				get
		        {
					if(_IsClientUpdate_W == null)
	        	    {
						_IsClientUpdate_W = TearOff.IsClientUpdate;
					}
					return _IsClientUpdate_W;
				}
			}

			private WhereParameter _NotificationTypeID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _Description_W = null;
			private WhereParameter _ProcessingAssemblyName_W = null;
			private WhereParameter _ProcessingClassName_W = null;
			private WhereParameter _ProcessingProcedureName_W = null;
			private WhereParameter _NotificationEmailDefaultHeader_W = null;
			private WhereParameter _NotificationEmailDefaultDescription_W = null;
			private WhereParameter _IsClientUpdate_W = null;

			public void WhereClauseReset()
			{
				_NotificationTypeID_W = null;
				_Name_W = null;
				_Description_W = null;
				_ProcessingAssemblyName_W = null;
				_ProcessingClassName_W = null;
				_ProcessingProcedureName_W = null;
				_NotificationEmailDefaultHeader_W = null;
				_NotificationEmailDefaultDescription_W = null;
				_IsClientUpdate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter NotificationTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotificationTypeID, Parameters.NotificationTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProcessingAssemblyName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProcessingAssemblyName, Parameters.ProcessingAssemblyName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProcessingClassName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProcessingClassName, Parameters.ProcessingClassName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProcessingProcedureName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProcessingProcedureName, Parameters.ProcessingProcedureName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotificationEmailDefaultHeader
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotificationEmailDefaultHeader, Parameters.NotificationEmailDefaultHeader);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotificationEmailDefaultDescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotificationEmailDefaultDescription, Parameters.NotificationEmailDefaultDescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsClientUpdate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsClientUpdate, Parameters.IsClientUpdate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter NotificationTypeID
		    {
				get
		        {
					if(_NotificationTypeID_W == null)
	        	    {
						_NotificationTypeID_W = TearOff.NotificationTypeID;
					}
					return _NotificationTypeID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public AggregateParameter ProcessingAssemblyName
		    {
				get
		        {
					if(_ProcessingAssemblyName_W == null)
	        	    {
						_ProcessingAssemblyName_W = TearOff.ProcessingAssemblyName;
					}
					return _ProcessingAssemblyName_W;
				}
			}

			public AggregateParameter ProcessingClassName
		    {
				get
		        {
					if(_ProcessingClassName_W == null)
	        	    {
						_ProcessingClassName_W = TearOff.ProcessingClassName;
					}
					return _ProcessingClassName_W;
				}
			}

			public AggregateParameter ProcessingProcedureName
		    {
				get
		        {
					if(_ProcessingProcedureName_W == null)
	        	    {
						_ProcessingProcedureName_W = TearOff.ProcessingProcedureName;
					}
					return _ProcessingProcedureName_W;
				}
			}

			public AggregateParameter NotificationEmailDefaultHeader
		    {
				get
		        {
					if(_NotificationEmailDefaultHeader_W == null)
	        	    {
						_NotificationEmailDefaultHeader_W = TearOff.NotificationEmailDefaultHeader;
					}
					return _NotificationEmailDefaultHeader_W;
				}
			}

			public AggregateParameter NotificationEmailDefaultDescription
		    {
				get
		        {
					if(_NotificationEmailDefaultDescription_W == null)
	        	    {
						_NotificationEmailDefaultDescription_W = TearOff.NotificationEmailDefaultDescription;
					}
					return _NotificationEmailDefaultDescription_W;
				}
			}

			public AggregateParameter IsClientUpdate
		    {
				get
		        {
					if(_IsClientUpdate_W == null)
	        	    {
						_IsClientUpdate_W = TearOff.IsClientUpdate;
					}
					return _IsClientUpdate_W;
				}
			}

			private AggregateParameter _NotificationTypeID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _Description_W = null;
			private AggregateParameter _ProcessingAssemblyName_W = null;
			private AggregateParameter _ProcessingClassName_W = null;
			private AggregateParameter _ProcessingProcedureName_W = null;
			private AggregateParameter _NotificationEmailDefaultHeader_W = null;
			private AggregateParameter _NotificationEmailDefaultDescription_W = null;
			private AggregateParameter _IsClientUpdate_W = null;

			public void AggregateClauseReset()
			{
				_NotificationTypeID_W = null;
				_Name_W = null;
				_Description_W = null;
				_ProcessingAssemblyName_W = null;
				_ProcessingClassName_W = null;
				_ProcessingProcedureName_W = null;
				_NotificationEmailDefaultHeader_W = null;
				_NotificationEmailDefaultDescription_W = null;
				_IsClientUpdate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertNotificationType]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.NotificationTypeID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateNotificationType]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteNotificationType]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.NotificationTypeID);
			p.SourceColumn = ColumnNames.NotificationTypeID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.NotificationTypeID);
			p.SourceColumn = ColumnNames.NotificationTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description);
			p.SourceColumn = ColumnNames.Description;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProcessingAssemblyName);
			p.SourceColumn = ColumnNames.ProcessingAssemblyName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProcessingClassName);
			p.SourceColumn = ColumnNames.ProcessingClassName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProcessingProcedureName);
			p.SourceColumn = ColumnNames.ProcessingProcedureName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotificationEmailDefaultHeader);
			p.SourceColumn = ColumnNames.NotificationEmailDefaultHeader;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotificationEmailDefaultDescription);
			p.SourceColumn = ColumnNames.NotificationEmailDefaultDescription;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsClientUpdate);
			p.SourceColumn = ColumnNames.IsClientUpdate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
