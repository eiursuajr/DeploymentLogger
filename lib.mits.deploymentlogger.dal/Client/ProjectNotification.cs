/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.5.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DL_DAL.Client
{
    public abstract class _ProjectNotification : SqlClientEntity
    {
        public _ProjectNotification()
        {
            this.QuerySource = "ProjectNotification";
            this.MappingName = "ProjectNotification";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllProjectNotification]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ProjectNotificationID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ProjectNotificationID, ProjectNotificationID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadProjectNotificationByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ProjectNotificationID
            {
                get
                {
                    return new SqlParameter("@ProjectNotificationID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter RoleID
            {
                get
                {
                    return new SqlParameter("@RoleID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter AddressBookEntryID
            {
                get
                {
                    return new SqlParameter("@AddressBookEntryID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter UserID
            {
                get
                {
                    return new SqlParameter("@UserID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ProjectID
            {
                get
                {
                    return new SqlParameter("@ProjectID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter UpdateID
            {
                get
                {
                    return new SqlParameter("@UpdateID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter NotificationTypeID
            {
                get
                {
                    return new SqlParameter("@NotificationTypeID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ImpactLevelID
            {
                get
                {
                    return new SqlParameter("@ImpactLevelID", SqlDbType.Int, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ProjectNotificationID = "ProjectNotificationID";
            public const string RoleID = "RoleID";
            public const string AddressBookEntryID = "AddressBookEntryID";
            public const string UserID = "UserID";
            public const string ProjectID = "ProjectID";
            public const string UpdateID = "UpdateID";
            public const string NotificationTypeID = "NotificationTypeID";
            public const string ImpactLevelID = "ImpactLevelID";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ProjectNotificationID] = _ProjectNotification.PropertyNames.ProjectNotificationID;
                    ht[RoleID] = _ProjectNotification.PropertyNames.RoleID;
                    ht[AddressBookEntryID] = _ProjectNotification.PropertyNames.AddressBookEntryID;
                    ht[UserID] = _ProjectNotification.PropertyNames.UserID;
                    ht[ProjectID] = _ProjectNotification.PropertyNames.ProjectID;
                    ht[UpdateID] = _ProjectNotification.PropertyNames.UpdateID;
                    ht[NotificationTypeID] = _ProjectNotification.PropertyNames.NotificationTypeID;
                    ht[ImpactLevelID] = _ProjectNotification.PropertyNames.ImpactLevelID;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ProjectNotificationID = "ProjectNotificationID";
            public const string RoleID = "RoleID";
            public const string AddressBookEntryID = "AddressBookEntryID";
            public const string UserID = "UserID";
            public const string ProjectID = "ProjectID";
            public const string UpdateID = "UpdateID";
            public const string NotificationTypeID = "NotificationTypeID";
            public const string ImpactLevelID = "ImpactLevelID";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ProjectNotificationID] = _ProjectNotification.ColumnNames.ProjectNotificationID;
                    ht[RoleID] = _ProjectNotification.ColumnNames.RoleID;
                    ht[AddressBookEntryID] = _ProjectNotification.ColumnNames.AddressBookEntryID;
                    ht[UserID] = _ProjectNotification.ColumnNames.UserID;
                    ht[ProjectID] = _ProjectNotification.ColumnNames.ProjectID;
                    ht[UpdateID] = _ProjectNotification.ColumnNames.UpdateID;
                    ht[NotificationTypeID] = _ProjectNotification.ColumnNames.NotificationTypeID;
                    ht[ImpactLevelID] = _ProjectNotification.ColumnNames.ImpactLevelID;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ProjectNotificationID = "s_ProjectNotificationID";
            public const string RoleID = "s_RoleID";
            public const string AddressBookEntryID = "s_AddressBookEntryID";
            public const string UserID = "s_UserID";
            public const string ProjectID = "s_ProjectID";
            public const string UpdateID = "s_UpdateID";
            public const string NotificationTypeID = "s_NotificationTypeID";
            public const string ImpactLevelID = "s_ImpactLevelID";

        }
        #endregion

        #region Properties

        public virtual int ProjectNotificationID
        {
            get
            {
                return base.Getint(ColumnNames.ProjectNotificationID);
            }
            set
            {
                base.Setint(ColumnNames.ProjectNotificationID, value);
            }
        }

        public virtual int RoleID
        {
            get
            {
                return base.Getint(ColumnNames.RoleID);
            }
            set
            {
                base.Setint(ColumnNames.RoleID, value);
            }
        }

        public virtual int AddressBookEntryID
        {
            get
            {
                return base.Getint(ColumnNames.AddressBookEntryID);
            }
            set
            {
                base.Setint(ColumnNames.AddressBookEntryID, value);
            }
        }

        public virtual int UserID
        {
            get
            {
                return base.Getint(ColumnNames.UserID);
            }
            set
            {
                base.Setint(ColumnNames.UserID, value);
            }
        }

        public virtual int ProjectID
        {
            get
            {
                return base.Getint(ColumnNames.ProjectID);
            }
            set
            {
                base.Setint(ColumnNames.ProjectID, value);
            }
        }

        public virtual int UpdateID
        {
            get
            {
                return base.Getint(ColumnNames.UpdateID);
            }
            set
            {
                base.Setint(ColumnNames.UpdateID, value);
            }
        }

        public virtual int NotificationTypeID
        {
            get
            {
                return base.Getint(ColumnNames.NotificationTypeID);
            }
            set
            {
                base.Setint(ColumnNames.NotificationTypeID, value);
            }
        }

        public virtual int ImpactLevelID
        {
            get
            {
                return base.Getint(ColumnNames.ImpactLevelID);
            }
            set
            {
                base.Setint(ColumnNames.ImpactLevelID, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ProjectNotificationID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ProjectNotificationID) ? string.Empty : base.GetintAsString(ColumnNames.ProjectNotificationID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ProjectNotificationID);
                else
                    this.ProjectNotificationID = base.SetintAsString(ColumnNames.ProjectNotificationID, value);
            }
        }

        public virtual string s_RoleID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.RoleID) ? string.Empty : base.GetintAsString(ColumnNames.RoleID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.RoleID);
                else
                    this.RoleID = base.SetintAsString(ColumnNames.RoleID, value);
            }
        }

        public virtual string s_AddressBookEntryID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.AddressBookEntryID) ? string.Empty : base.GetintAsString(ColumnNames.AddressBookEntryID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.AddressBookEntryID);
                else
                    this.AddressBookEntryID = base.SetintAsString(ColumnNames.AddressBookEntryID, value);
            }
        }

        public virtual string s_UserID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.UserID);
                else
                    this.UserID = base.SetintAsString(ColumnNames.UserID, value);
            }
        }

        public virtual string s_ProjectID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ProjectID) ? string.Empty : base.GetintAsString(ColumnNames.ProjectID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ProjectID);
                else
                    this.ProjectID = base.SetintAsString(ColumnNames.ProjectID, value);
            }
        }

        public virtual string s_UpdateID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.UpdateID) ? string.Empty : base.GetintAsString(ColumnNames.UpdateID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.UpdateID);
                else
                    this.UpdateID = base.SetintAsString(ColumnNames.UpdateID, value);
            }
        }

        public virtual string s_NotificationTypeID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.NotificationTypeID) ? string.Empty : base.GetintAsString(ColumnNames.NotificationTypeID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.NotificationTypeID);
                else
                    this.NotificationTypeID = base.SetintAsString(ColumnNames.NotificationTypeID, value);
            }
        }

        public virtual string s_ImpactLevelID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ImpactLevelID) ? string.Empty : base.GetintAsString(ColumnNames.ImpactLevelID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ImpactLevelID);
                else
                    this.ImpactLevelID = base.SetintAsString(ColumnNames.ImpactLevelID, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ProjectNotificationID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ProjectNotificationID, Parameters.ProjectNotificationID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter RoleID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.RoleID, Parameters.RoleID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter AddressBookEntryID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.AddressBookEntryID, Parameters.AddressBookEntryID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter UserID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ProjectID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ProjectID, Parameters.ProjectID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter UpdateID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.UpdateID, Parameters.UpdateID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter NotificationTypeID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.NotificationTypeID, Parameters.NotificationTypeID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ImpactLevelID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ImpactLevelID, Parameters.ImpactLevelID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ProjectNotificationID
            {
                get
                {
                    if (_ProjectNotificationID_W == null)
                    {
                        _ProjectNotificationID_W = TearOff.ProjectNotificationID;
                    }
                    return _ProjectNotificationID_W;
                }
            }

            public WhereParameter RoleID
            {
                get
                {
                    if (_RoleID_W == null)
                    {
                        _RoleID_W = TearOff.RoleID;
                    }
                    return _RoleID_W;
                }
            }

            public WhereParameter AddressBookEntryID
            {
                get
                {
                    if (_AddressBookEntryID_W == null)
                    {
                        _AddressBookEntryID_W = TearOff.AddressBookEntryID;
                    }
                    return _AddressBookEntryID_W;
                }
            }

            public WhereParameter UserID
            {
                get
                {
                    if (_UserID_W == null)
                    {
                        _UserID_W = TearOff.UserID;
                    }
                    return _UserID_W;
                }
            }

            public WhereParameter ProjectID
            {
                get
                {
                    if (_ProjectID_W == null)
                    {
                        _ProjectID_W = TearOff.ProjectID;
                    }
                    return _ProjectID_W;
                }
            }

            public WhereParameter UpdateID
            {
                get
                {
                    if (_UpdateID_W == null)
                    {
                        _UpdateID_W = TearOff.UpdateID;
                    }
                    return _UpdateID_W;
                }
            }

            public WhereParameter NotificationTypeID
            {
                get
                {
                    if (_NotificationTypeID_W == null)
                    {
                        _NotificationTypeID_W = TearOff.NotificationTypeID;
                    }
                    return _NotificationTypeID_W;
                }
            }

            public WhereParameter ImpactLevelID
            {
                get
                {
                    if (_ImpactLevelID_W == null)
                    {
                        _ImpactLevelID_W = TearOff.ImpactLevelID;
                    }
                    return _ImpactLevelID_W;
                }
            }

            private WhereParameter _ProjectNotificationID_W = null;
            private WhereParameter _RoleID_W = null;
            private WhereParameter _AddressBookEntryID_W = null;
            private WhereParameter _UserID_W = null;
            private WhereParameter _ProjectID_W = null;
            private WhereParameter _UpdateID_W = null;
            private WhereParameter _NotificationTypeID_W = null;
            private WhereParameter _ImpactLevelID_W = null;

            public void WhereClauseReset()
            {
                _ProjectNotificationID_W = null;
                _RoleID_W = null;
                _AddressBookEntryID_W = null;
                _UserID_W = null;
                _ProjectID_W = null;
                _UpdateID_W = null;
                _NotificationTypeID_W = null;
                _ImpactLevelID_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ProjectNotificationID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProjectNotificationID, Parameters.ProjectNotificationID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter RoleID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.RoleID, Parameters.RoleID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter AddressBookEntryID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.AddressBookEntryID, Parameters.AddressBookEntryID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter UserID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ProjectID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProjectID, Parameters.ProjectID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter UpdateID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.UpdateID, Parameters.UpdateID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter NotificationTypeID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotificationTypeID, Parameters.NotificationTypeID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ImpactLevelID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ImpactLevelID, Parameters.ImpactLevelID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ProjectNotificationID
            {
                get
                {
                    if (_ProjectNotificationID_W == null)
                    {
                        _ProjectNotificationID_W = TearOff.ProjectNotificationID;
                    }
                    return _ProjectNotificationID_W;
                }
            }

            public AggregateParameter RoleID
            {
                get
                {
                    if (_RoleID_W == null)
                    {
                        _RoleID_W = TearOff.RoleID;
                    }
                    return _RoleID_W;
                }
            }

            public AggregateParameter AddressBookEntryID
            {
                get
                {
                    if (_AddressBookEntryID_W == null)
                    {
                        _AddressBookEntryID_W = TearOff.AddressBookEntryID;
                    }
                    return _AddressBookEntryID_W;
                }
            }

            public AggregateParameter UserID
            {
                get
                {
                    if (_UserID_W == null)
                    {
                        _UserID_W = TearOff.UserID;
                    }
                    return _UserID_W;
                }
            }

            public AggregateParameter ProjectID
            {
                get
                {
                    if (_ProjectID_W == null)
                    {
                        _ProjectID_W = TearOff.ProjectID;
                    }
                    return _ProjectID_W;
                }
            }

            public AggregateParameter UpdateID
            {
                get
                {
                    if (_UpdateID_W == null)
                    {
                        _UpdateID_W = TearOff.UpdateID;
                    }
                    return _UpdateID_W;
                }
            }

            public AggregateParameter NotificationTypeID
            {
                get
                {
                    if (_NotificationTypeID_W == null)
                    {
                        _NotificationTypeID_W = TearOff.NotificationTypeID;
                    }
                    return _NotificationTypeID_W;
                }
            }

            public AggregateParameter ImpactLevelID
            {
                get
                {
                    if (_ImpactLevelID_W == null)
                    {
                        _ImpactLevelID_W = TearOff.ImpactLevelID;
                    }
                    return _ImpactLevelID_W;
                }
            }

            private AggregateParameter _ProjectNotificationID_W = null;
            private AggregateParameter _RoleID_W = null;
            private AggregateParameter _AddressBookEntryID_W = null;
            private AggregateParameter _UserID_W = null;
            private AggregateParameter _ProjectID_W = null;
            private AggregateParameter _UpdateID_W = null;
            private AggregateParameter _NotificationTypeID_W = null;
            private AggregateParameter _ImpactLevelID_W = null;

            public void AggregateClauseReset()
            {
                _ProjectNotificationID_W = null;
                _RoleID_W = null;
                _AddressBookEntryID_W = null;
                _UserID_W = null;
                _ProjectID_W = null;
                _UpdateID_W = null;
                _NotificationTypeID_W = null;
                _ImpactLevelID_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertProjectNotification]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.ProjectNotificationID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateProjectNotification]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteProjectNotification]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ProjectNotificationID);
            p.SourceColumn = ColumnNames.ProjectNotificationID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ProjectNotificationID);
            p.SourceColumn = ColumnNames.ProjectNotificationID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.RoleID);
            p.SourceColumn = ColumnNames.RoleID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.AddressBookEntryID);
            p.SourceColumn = ColumnNames.AddressBookEntryID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.UserID);
            p.SourceColumn = ColumnNames.UserID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ProjectID);
            p.SourceColumn = ColumnNames.ProjectID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.UpdateID);
            p.SourceColumn = ColumnNames.UpdateID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.NotificationTypeID);
            p.SourceColumn = ColumnNames.NotificationTypeID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ImpactLevelID);
            p.SourceColumn = ColumnNames.ImpactLevelID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}