
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.5.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DL_DAL.Client
{
	public abstract class _User : SqlClientEntity
	{
		public _User()
		{
			this.QuerySource = "User";
			this.MappingName = "User";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllUser]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int UserID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.UserID, UserID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadUserByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Login
			{
				get
				{
					return new SqlParameter("@Login", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Password
			{
				get
				{
					return new SqlParameter("@Password", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter AddressBookEntryID
			{
				get
				{
					return new SqlParameter("@AddressBookEntryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LastLoginDate
			{
				get
				{
					return new SqlParameter("@LastLoginDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter GUID
			{
				get
				{
					return new SqlParameter("@GUID", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter IsInactive
			{
				get
				{
					return new SqlParameter("@IsInactive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter PasswordQuestion
			{
				get
				{
					return new SqlParameter("@PasswordQuestion", SqlDbType.VarChar, 1024);
				}
			}
			
			public static SqlParameter PasswordAnswer
			{
				get
				{
					return new SqlParameter("@PasswordAnswer", SqlDbType.VarChar, 1024);
				}
			}
			
			public static SqlParameter IsApproved
			{
				get
				{
					return new SqlParameter("@IsApproved", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsLockedOut
			{
				get
				{
					return new SqlParameter("@IsLockedOut", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter CreationDate
			{
				get
				{
					return new SqlParameter("@CreationDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter LastActivityDate
			{
				get
				{
					return new SqlParameter("@LastActivityDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter LastPasswordChangedDate
			{
				get
				{
					return new SqlParameter("@LastPasswordChangedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter LastLockoutDate
			{
				get
				{
					return new SqlParameter("@LastLockoutDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string UserID = "UserID";
            public const string Login = "Login";
            public const string Password = "Password";
            public const string AddressBookEntryID = "AddressBookEntryID";
            public const string LastLoginDate = "LastLoginDate";
            public const string GUID = "GUID";
            public const string IsInactive = "IsInactive";
            public const string PasswordQuestion = "PasswordQuestion";
            public const string PasswordAnswer = "PasswordAnswer";
            public const string IsApproved = "IsApproved";
            public const string IsLockedOut = "IsLockedOut";
            public const string CreationDate = "CreationDate";
            public const string LastActivityDate = "LastActivityDate";
            public const string LastPasswordChangedDate = "LastPasswordChangedDate";
            public const string LastLockoutDate = "LastLockoutDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserID] = _User.PropertyNames.UserID;
					ht[Login] = _User.PropertyNames.Login;
					ht[Password] = _User.PropertyNames.Password;
					ht[AddressBookEntryID] = _User.PropertyNames.AddressBookEntryID;
					ht[LastLoginDate] = _User.PropertyNames.LastLoginDate;
					ht[GUID] = _User.PropertyNames.GUID;
					ht[IsInactive] = _User.PropertyNames.IsInactive;
					ht[PasswordQuestion] = _User.PropertyNames.PasswordQuestion;
					ht[PasswordAnswer] = _User.PropertyNames.PasswordAnswer;
					ht[IsApproved] = _User.PropertyNames.IsApproved;
					ht[IsLockedOut] = _User.PropertyNames.IsLockedOut;
					ht[CreationDate] = _User.PropertyNames.CreationDate;
					ht[LastActivityDate] = _User.PropertyNames.LastActivityDate;
					ht[LastPasswordChangedDate] = _User.PropertyNames.LastPasswordChangedDate;
					ht[LastLockoutDate] = _User.PropertyNames.LastLockoutDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string UserID = "UserID";
            public const string Login = "Login";
            public const string Password = "Password";
            public const string AddressBookEntryID = "AddressBookEntryID";
            public const string LastLoginDate = "LastLoginDate";
            public const string GUID = "GUID";
            public const string IsInactive = "IsInactive";
            public const string PasswordQuestion = "PasswordQuestion";
            public const string PasswordAnswer = "PasswordAnswer";
            public const string IsApproved = "IsApproved";
            public const string IsLockedOut = "IsLockedOut";
            public const string CreationDate = "CreationDate";
            public const string LastActivityDate = "LastActivityDate";
            public const string LastPasswordChangedDate = "LastPasswordChangedDate";
            public const string LastLockoutDate = "LastLockoutDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserID] = _User.ColumnNames.UserID;
					ht[Login] = _User.ColumnNames.Login;
					ht[Password] = _User.ColumnNames.Password;
					ht[AddressBookEntryID] = _User.ColumnNames.AddressBookEntryID;
					ht[LastLoginDate] = _User.ColumnNames.LastLoginDate;
					ht[GUID] = _User.ColumnNames.GUID;
					ht[IsInactive] = _User.ColumnNames.IsInactive;
					ht[PasswordQuestion] = _User.ColumnNames.PasswordQuestion;
					ht[PasswordAnswer] = _User.ColumnNames.PasswordAnswer;
					ht[IsApproved] = _User.ColumnNames.IsApproved;
					ht[IsLockedOut] = _User.ColumnNames.IsLockedOut;
					ht[CreationDate] = _User.ColumnNames.CreationDate;
					ht[LastActivityDate] = _User.ColumnNames.LastActivityDate;
					ht[LastPasswordChangedDate] = _User.ColumnNames.LastPasswordChangedDate;
					ht[LastLockoutDate] = _User.ColumnNames.LastLockoutDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string UserID = "s_UserID";
            public const string Login = "s_Login";
            public const string Password = "s_Password";
            public const string AddressBookEntryID = "s_AddressBookEntryID";
            public const string LastLoginDate = "s_LastLoginDate";
            public const string GUID = "s_GUID";
            public const string IsInactive = "s_IsInactive";
            public const string PasswordQuestion = "s_PasswordQuestion";
            public const string PasswordAnswer = "s_PasswordAnswer";
            public const string IsApproved = "s_IsApproved";
            public const string IsLockedOut = "s_IsLockedOut";
            public const string CreationDate = "s_CreationDate";
            public const string LastActivityDate = "s_LastActivityDate";
            public const string LastPasswordChangedDate = "s_LastPasswordChangedDate";
            public const string LastLockoutDate = "s_LastLockoutDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual string Login
	    {
			get
	        {
				return base.Getstring(ColumnNames.Login);
			}
			set
	        {
				base.Setstring(ColumnNames.Login, value);
			}
		}

		public virtual string Password
	    {
			get
	        {
				return base.Getstring(ColumnNames.Password);
			}
			set
	        {
				base.Setstring(ColumnNames.Password, value);
			}
		}

		public virtual int AddressBookEntryID
	    {
			get
	        {
				return base.Getint(ColumnNames.AddressBookEntryID);
			}
			set
	        {
				base.Setint(ColumnNames.AddressBookEntryID, value);
			}
		}

		public virtual DateTime LastLoginDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastLoginDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastLoginDate, value);
			}
		}

		public virtual Guid GUID
	    {
			get
	        {
				return base.GetGuid(ColumnNames.GUID);
			}
			set
	        {
				base.SetGuid(ColumnNames.GUID, value);
			}
		}

		public virtual bool IsInactive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsInactive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsInactive, value);
			}
		}

		public virtual string PasswordQuestion
	    {
			get
	        {
				return base.Getstring(ColumnNames.PasswordQuestion);
			}
			set
	        {
				base.Setstring(ColumnNames.PasswordQuestion, value);
			}
		}

		public virtual string PasswordAnswer
	    {
			get
	        {
				return base.Getstring(ColumnNames.PasswordAnswer);
			}
			set
	        {
				base.Setstring(ColumnNames.PasswordAnswer, value);
			}
		}

		public virtual bool IsApproved
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsApproved);
			}
			set
	        {
				base.Setbool(ColumnNames.IsApproved, value);
			}
		}

		public virtual bool IsLockedOut
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsLockedOut);
			}
			set
	        {
				base.Setbool(ColumnNames.IsLockedOut, value);
			}
		}

		public virtual DateTime CreationDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreationDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreationDate, value);
			}
		}

		public virtual DateTime LastActivityDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastActivityDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastActivityDate, value);
			}
		}

		public virtual DateTime LastPasswordChangedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastPasswordChangedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastPasswordChangedDate, value);
			}
		}

		public virtual DateTime LastLockoutDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastLockoutDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastLockoutDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_Login
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Login) ? string.Empty : base.GetstringAsString(ColumnNames.Login);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Login);
				else
					this.Login = base.SetstringAsString(ColumnNames.Login, value);
			}
		}

		public virtual string s_Password
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Password) ? string.Empty : base.GetstringAsString(ColumnNames.Password);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Password);
				else
					this.Password = base.SetstringAsString(ColumnNames.Password, value);
			}
		}

		public virtual string s_AddressBookEntryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AddressBookEntryID) ? string.Empty : base.GetintAsString(ColumnNames.AddressBookEntryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AddressBookEntryID);
				else
					this.AddressBookEntryID = base.SetintAsString(ColumnNames.AddressBookEntryID, value);
			}
		}

		public virtual string s_LastLoginDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastLoginDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastLoginDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastLoginDate);
				else
					this.LastLoginDate = base.SetDateTimeAsString(ColumnNames.LastLoginDate, value);
			}
		}

		public virtual string s_GUID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GUID) ? string.Empty : base.GetGuidAsString(ColumnNames.GUID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GUID);
				else
					this.GUID = base.SetGuidAsString(ColumnNames.GUID, value);
			}
		}

		public virtual string s_IsInactive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsInactive) ? string.Empty : base.GetboolAsString(ColumnNames.IsInactive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsInactive);
				else
					this.IsInactive = base.SetboolAsString(ColumnNames.IsInactive, value);
			}
		}

		public virtual string s_PasswordQuestion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PasswordQuestion) ? string.Empty : base.GetstringAsString(ColumnNames.PasswordQuestion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PasswordQuestion);
				else
					this.PasswordQuestion = base.SetstringAsString(ColumnNames.PasswordQuestion, value);
			}
		}

		public virtual string s_PasswordAnswer
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PasswordAnswer) ? string.Empty : base.GetstringAsString(ColumnNames.PasswordAnswer);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PasswordAnswer);
				else
					this.PasswordAnswer = base.SetstringAsString(ColumnNames.PasswordAnswer, value);
			}
		}

		public virtual string s_IsApproved
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsApproved) ? string.Empty : base.GetboolAsString(ColumnNames.IsApproved);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsApproved);
				else
					this.IsApproved = base.SetboolAsString(ColumnNames.IsApproved, value);
			}
		}

		public virtual string s_IsLockedOut
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsLockedOut) ? string.Empty : base.GetboolAsString(ColumnNames.IsLockedOut);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsLockedOut);
				else
					this.IsLockedOut = base.SetboolAsString(ColumnNames.IsLockedOut, value);
			}
		}

		public virtual string s_CreationDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreationDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreationDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreationDate);
				else
					this.CreationDate = base.SetDateTimeAsString(ColumnNames.CreationDate, value);
			}
		}

		public virtual string s_LastActivityDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastActivityDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastActivityDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastActivityDate);
				else
					this.LastActivityDate = base.SetDateTimeAsString(ColumnNames.LastActivityDate, value);
			}
		}

		public virtual string s_LastPasswordChangedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastPasswordChangedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastPasswordChangedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastPasswordChangedDate);
				else
					this.LastPasswordChangedDate = base.SetDateTimeAsString(ColumnNames.LastPasswordChangedDate, value);
			}
		}

		public virtual string s_LastLockoutDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastLockoutDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastLockoutDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastLockoutDate);
				else
					this.LastLockoutDate = base.SetDateTimeAsString(ColumnNames.LastLockoutDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Login
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Login, Parameters.Login);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Password
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AddressBookEntryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AddressBookEntryID, Parameters.AddressBookEntryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastLoginDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastLoginDate, Parameters.LastLoginDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GUID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GUID, Parameters.GUID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsInactive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsInactive, Parameters.IsInactive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PasswordQuestion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PasswordQuestion, Parameters.PasswordQuestion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PasswordAnswer
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PasswordAnswer, Parameters.PasswordAnswer);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsApproved
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsApproved, Parameters.IsApproved);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsLockedOut
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsLockedOut, Parameters.IsLockedOut);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreationDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreationDate, Parameters.CreationDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastActivityDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastActivityDate, Parameters.LastActivityDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastPasswordChangedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastPasswordChangedDate, Parameters.LastPasswordChangedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastLockoutDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastLockoutDate, Parameters.LastLockoutDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter Login
		    {
				get
		        {
					if(_Login_W == null)
	        	    {
						_Login_W = TearOff.Login;
					}
					return _Login_W;
				}
			}

			public WhereParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public WhereParameter AddressBookEntryID
		    {
				get
		        {
					if(_AddressBookEntryID_W == null)
	        	    {
						_AddressBookEntryID_W = TearOff.AddressBookEntryID;
					}
					return _AddressBookEntryID_W;
				}
			}

			public WhereParameter LastLoginDate
		    {
				get
		        {
					if(_LastLoginDate_W == null)
	        	    {
						_LastLoginDate_W = TearOff.LastLoginDate;
					}
					return _LastLoginDate_W;
				}
			}

			public WhereParameter GUID
		    {
				get
		        {
					if(_GUID_W == null)
	        	    {
						_GUID_W = TearOff.GUID;
					}
					return _GUID_W;
				}
			}

			public WhereParameter IsInactive
		    {
				get
		        {
					if(_IsInactive_W == null)
	        	    {
						_IsInactive_W = TearOff.IsInactive;
					}
					return _IsInactive_W;
				}
			}

			public WhereParameter PasswordQuestion
		    {
				get
		        {
					if(_PasswordQuestion_W == null)
	        	    {
						_PasswordQuestion_W = TearOff.PasswordQuestion;
					}
					return _PasswordQuestion_W;
				}
			}

			public WhereParameter PasswordAnswer
		    {
				get
		        {
					if(_PasswordAnswer_W == null)
	        	    {
						_PasswordAnswer_W = TearOff.PasswordAnswer;
					}
					return _PasswordAnswer_W;
				}
			}

			public WhereParameter IsApproved
		    {
				get
		        {
					if(_IsApproved_W == null)
	        	    {
						_IsApproved_W = TearOff.IsApproved;
					}
					return _IsApproved_W;
				}
			}

			public WhereParameter IsLockedOut
		    {
				get
		        {
					if(_IsLockedOut_W == null)
	        	    {
						_IsLockedOut_W = TearOff.IsLockedOut;
					}
					return _IsLockedOut_W;
				}
			}

			public WhereParameter CreationDate
		    {
				get
		        {
					if(_CreationDate_W == null)
	        	    {
						_CreationDate_W = TearOff.CreationDate;
					}
					return _CreationDate_W;
				}
			}

			public WhereParameter LastActivityDate
		    {
				get
		        {
					if(_LastActivityDate_W == null)
	        	    {
						_LastActivityDate_W = TearOff.LastActivityDate;
					}
					return _LastActivityDate_W;
				}
			}

			public WhereParameter LastPasswordChangedDate
		    {
				get
		        {
					if(_LastPasswordChangedDate_W == null)
	        	    {
						_LastPasswordChangedDate_W = TearOff.LastPasswordChangedDate;
					}
					return _LastPasswordChangedDate_W;
				}
			}

			public WhereParameter LastLockoutDate
		    {
				get
		        {
					if(_LastLockoutDate_W == null)
	        	    {
						_LastLockoutDate_W = TearOff.LastLockoutDate;
					}
					return _LastLockoutDate_W;
				}
			}

			private WhereParameter _UserID_W = null;
			private WhereParameter _Login_W = null;
			private WhereParameter _Password_W = null;
			private WhereParameter _AddressBookEntryID_W = null;
			private WhereParameter _LastLoginDate_W = null;
			private WhereParameter _GUID_W = null;
			private WhereParameter _IsInactive_W = null;
			private WhereParameter _PasswordQuestion_W = null;
			private WhereParameter _PasswordAnswer_W = null;
			private WhereParameter _IsApproved_W = null;
			private WhereParameter _IsLockedOut_W = null;
			private WhereParameter _CreationDate_W = null;
			private WhereParameter _LastActivityDate_W = null;
			private WhereParameter _LastPasswordChangedDate_W = null;
			private WhereParameter _LastLockoutDate_W = null;

			public void WhereClauseReset()
			{
				_UserID_W = null;
				_Login_W = null;
				_Password_W = null;
				_AddressBookEntryID_W = null;
				_LastLoginDate_W = null;
				_GUID_W = null;
				_IsInactive_W = null;
				_PasswordQuestion_W = null;
				_PasswordAnswer_W = null;
				_IsApproved_W = null;
				_IsLockedOut_W = null;
				_CreationDate_W = null;
				_LastActivityDate_W = null;
				_LastPasswordChangedDate_W = null;
				_LastLockoutDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Login
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Login, Parameters.Login);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Password
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AddressBookEntryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AddressBookEntryID, Parameters.AddressBookEntryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastLoginDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastLoginDate, Parameters.LastLoginDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GUID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GUID, Parameters.GUID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsInactive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsInactive, Parameters.IsInactive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PasswordQuestion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PasswordQuestion, Parameters.PasswordQuestion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PasswordAnswer
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PasswordAnswer, Parameters.PasswordAnswer);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsApproved
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsApproved, Parameters.IsApproved);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsLockedOut
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsLockedOut, Parameters.IsLockedOut);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreationDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreationDate, Parameters.CreationDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastActivityDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastActivityDate, Parameters.LastActivityDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastPasswordChangedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastPasswordChangedDate, Parameters.LastPasswordChangedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastLockoutDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastLockoutDate, Parameters.LastLockoutDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter Login
		    {
				get
		        {
					if(_Login_W == null)
	        	    {
						_Login_W = TearOff.Login;
					}
					return _Login_W;
				}
			}

			public AggregateParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public AggregateParameter AddressBookEntryID
		    {
				get
		        {
					if(_AddressBookEntryID_W == null)
	        	    {
						_AddressBookEntryID_W = TearOff.AddressBookEntryID;
					}
					return _AddressBookEntryID_W;
				}
			}

			public AggregateParameter LastLoginDate
		    {
				get
		        {
					if(_LastLoginDate_W == null)
	        	    {
						_LastLoginDate_W = TearOff.LastLoginDate;
					}
					return _LastLoginDate_W;
				}
			}

			public AggregateParameter GUID
		    {
				get
		        {
					if(_GUID_W == null)
	        	    {
						_GUID_W = TearOff.GUID;
					}
					return _GUID_W;
				}
			}

			public AggregateParameter IsInactive
		    {
				get
		        {
					if(_IsInactive_W == null)
	        	    {
						_IsInactive_W = TearOff.IsInactive;
					}
					return _IsInactive_W;
				}
			}

			public AggregateParameter PasswordQuestion
		    {
				get
		        {
					if(_PasswordQuestion_W == null)
	        	    {
						_PasswordQuestion_W = TearOff.PasswordQuestion;
					}
					return _PasswordQuestion_W;
				}
			}

			public AggregateParameter PasswordAnswer
		    {
				get
		        {
					if(_PasswordAnswer_W == null)
	        	    {
						_PasswordAnswer_W = TearOff.PasswordAnswer;
					}
					return _PasswordAnswer_W;
				}
			}

			public AggregateParameter IsApproved
		    {
				get
		        {
					if(_IsApproved_W == null)
	        	    {
						_IsApproved_W = TearOff.IsApproved;
					}
					return _IsApproved_W;
				}
			}

			public AggregateParameter IsLockedOut
		    {
				get
		        {
					if(_IsLockedOut_W == null)
	        	    {
						_IsLockedOut_W = TearOff.IsLockedOut;
					}
					return _IsLockedOut_W;
				}
			}

			public AggregateParameter CreationDate
		    {
				get
		        {
					if(_CreationDate_W == null)
	        	    {
						_CreationDate_W = TearOff.CreationDate;
					}
					return _CreationDate_W;
				}
			}

			public AggregateParameter LastActivityDate
		    {
				get
		        {
					if(_LastActivityDate_W == null)
	        	    {
						_LastActivityDate_W = TearOff.LastActivityDate;
					}
					return _LastActivityDate_W;
				}
			}

			public AggregateParameter LastPasswordChangedDate
		    {
				get
		        {
					if(_LastPasswordChangedDate_W == null)
	        	    {
						_LastPasswordChangedDate_W = TearOff.LastPasswordChangedDate;
					}
					return _LastPasswordChangedDate_W;
				}
			}

			public AggregateParameter LastLockoutDate
		    {
				get
		        {
					if(_LastLockoutDate_W == null)
	        	    {
						_LastLockoutDate_W = TearOff.LastLockoutDate;
					}
					return _LastLockoutDate_W;
				}
			}

			private AggregateParameter _UserID_W = null;
			private AggregateParameter _Login_W = null;
			private AggregateParameter _Password_W = null;
			private AggregateParameter _AddressBookEntryID_W = null;
			private AggregateParameter _LastLoginDate_W = null;
			private AggregateParameter _GUID_W = null;
			private AggregateParameter _IsInactive_W = null;
			private AggregateParameter _PasswordQuestion_W = null;
			private AggregateParameter _PasswordAnswer_W = null;
			private AggregateParameter _IsApproved_W = null;
			private AggregateParameter _IsLockedOut_W = null;
			private AggregateParameter _CreationDate_W = null;
			private AggregateParameter _LastActivityDate_W = null;
			private AggregateParameter _LastPasswordChangedDate_W = null;
			private AggregateParameter _LastLockoutDate_W = null;

			public void AggregateClauseReset()
			{
				_UserID_W = null;
				_Login_W = null;
				_Password_W = null;
				_AddressBookEntryID_W = null;
				_LastLoginDate_W = null;
				_GUID_W = null;
				_IsInactive_W = null;
				_PasswordQuestion_W = null;
				_PasswordAnswer_W = null;
				_IsApproved_W = null;
				_IsLockedOut_W = null;
				_CreationDate_W = null;
				_LastActivityDate_W = null;
				_LastPasswordChangedDate_W = null;
				_LastLockoutDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertUser]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.UserID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateUser]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteUser]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Login);
			p.SourceColumn = ColumnNames.Login;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Password);
			p.SourceColumn = ColumnNames.Password;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AddressBookEntryID);
			p.SourceColumn = ColumnNames.AddressBookEntryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastLoginDate);
			p.SourceColumn = ColumnNames.LastLoginDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GUID);
			p.SourceColumn = ColumnNames.GUID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsInactive);
			p.SourceColumn = ColumnNames.IsInactive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PasswordQuestion);
			p.SourceColumn = ColumnNames.PasswordQuestion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PasswordAnswer);
			p.SourceColumn = ColumnNames.PasswordAnswer;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsApproved);
			p.SourceColumn = ColumnNames.IsApproved;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsLockedOut);
			p.SourceColumn = ColumnNames.IsLockedOut;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreationDate);
			p.SourceColumn = ColumnNames.CreationDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastActivityDate);
			p.SourceColumn = ColumnNames.LastActivityDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastPasswordChangedDate);
			p.SourceColumn = ColumnNames.LastPasswordChangedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastLockoutDate);
			p.SourceColumn = ColumnNames.LastLockoutDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
