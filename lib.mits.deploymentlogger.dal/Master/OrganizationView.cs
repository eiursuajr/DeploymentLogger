/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.5.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DL_DAL.Master
{
	public class OrganizationView : SqlClientEntity
	{
		public OrganizationView()
		{
			this.QuerySource = "OrganizationView";
			this.MappingName = "OrganizationView";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter OrganizationID
			{
				get
				{
					return new SqlParameter("@OrganizationID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter Description
			{
				get
				{
					return new SqlParameter("@Description", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter DatabaseID
			{
				get
				{
					return new SqlParameter("@DatabaseID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsDeleted
			{
				get
				{
					return new SqlParameter("@IsDeleted", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter DatabaseName
			{
				get
				{
					return new SqlParameter("@DatabaseName", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter UserCount
			{
				get
				{
					return new SqlParameter("@UserCount", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string OrganizationID = "OrganizationID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string DatabaseID = "DatabaseID";
            public const string IsDeleted = "IsDeleted";
            public const string DatabaseName = "DatabaseName";
            public const string UserCount = "UserCount";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[OrganizationID] = OrganizationView.PropertyNames.OrganizationID;
					ht[Name] = OrganizationView.PropertyNames.Name;
					ht[Description] = OrganizationView.PropertyNames.Description;
					ht[DatabaseID] = OrganizationView.PropertyNames.DatabaseID;
					ht[IsDeleted] = OrganizationView.PropertyNames.IsDeleted;
					ht[DatabaseName] = OrganizationView.PropertyNames.DatabaseName;
					ht[UserCount] = OrganizationView.PropertyNames.UserCount;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string OrganizationID = "OrganizationID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string DatabaseID = "DatabaseID";
            public const string IsDeleted = "IsDeleted";
            public const string DatabaseName = "DatabaseName";
            public const string UserCount = "UserCount";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[OrganizationID] = OrganizationView.ColumnNames.OrganizationID;
					ht[Name] = OrganizationView.ColumnNames.Name;
					ht[Description] = OrganizationView.ColumnNames.Description;
					ht[DatabaseID] = OrganizationView.ColumnNames.DatabaseID;
					ht[IsDeleted] = OrganizationView.ColumnNames.IsDeleted;
					ht[DatabaseName] = OrganizationView.ColumnNames.DatabaseName;
					ht[UserCount] = OrganizationView.ColumnNames.UserCount;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string OrganizationID = "s_OrganizationID";
            public const string Name = "s_Name";
            public const string Description = "s_Description";
            public const string DatabaseID = "s_DatabaseID";
            public const string IsDeleted = "s_IsDeleted";
            public const string DatabaseName = "s_DatabaseName";
            public const string UserCount = "s_UserCount";

		}
		#endregion	
		
		#region Properties
			public virtual int OrganizationID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrganizationID);
			}
			set
	        {
				base.Setint(ColumnNames.OrganizationID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string Description
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description);
			}
			set
	        {
				base.Setstring(ColumnNames.Description, value);
			}
		}

		public virtual int DatabaseID
	    {
			get
	        {
				return base.Getint(ColumnNames.DatabaseID);
			}
			set
	        {
				base.Setint(ColumnNames.DatabaseID, value);
			}
		}

		public virtual bool IsDeleted
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsDeleted);
			}
			set
	        {
				base.Setbool(ColumnNames.IsDeleted, value);
			}
		}

		public virtual string DatabaseName
	    {
			get
	        {
				return base.Getstring(ColumnNames.DatabaseName);
			}
			set
	        {
				base.Setstring(ColumnNames.DatabaseName, value);
			}
		}

		public virtual int UserCount
	    {
			get
	        {
				return base.Getint(ColumnNames.UserCount);
			}
			set
	        {
				base.Setint(ColumnNames.UserCount, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_OrganizationID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrganizationID) ? string.Empty : base.GetintAsString(ColumnNames.OrganizationID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrganizationID);
				else
					this.OrganizationID = base.SetintAsString(ColumnNames.OrganizationID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description);
				else
					this.Description = base.SetstringAsString(ColumnNames.Description, value);
			}
		}

		public virtual string s_DatabaseID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DatabaseID) ? string.Empty : base.GetintAsString(ColumnNames.DatabaseID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DatabaseID);
				else
					this.DatabaseID = base.SetintAsString(ColumnNames.DatabaseID, value);
			}
		}

		public virtual string s_IsDeleted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsDeleted) ? string.Empty : base.GetboolAsString(ColumnNames.IsDeleted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsDeleted);
				else
					this.IsDeleted = base.SetboolAsString(ColumnNames.IsDeleted, value);
			}
		}

		public virtual string s_DatabaseName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DatabaseName) ? string.Empty : base.GetstringAsString(ColumnNames.DatabaseName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DatabaseName);
				else
					this.DatabaseName = base.SetstringAsString(ColumnNames.DatabaseName, value);
			}
		}

		public virtual string s_UserCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserCount) ? string.Empty : base.GetintAsString(ColumnNames.UserCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserCount);
				else
					this.UserCount = base.SetintAsString(ColumnNames.UserCount, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter OrganizationID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrganizationID, Parameters.OrganizationID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DatabaseID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DatabaseID, Parameters.DatabaseID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsDeleted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DatabaseName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DatabaseName, Parameters.DatabaseName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserCount, Parameters.UserCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter OrganizationID
		    {
				get
		        {
					if(_OrganizationID_W == null)
	        	    {
						_OrganizationID_W = TearOff.OrganizationID;
					}
					return _OrganizationID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public WhereParameter DatabaseID
		    {
				get
		        {
					if(_DatabaseID_W == null)
	        	    {
						_DatabaseID_W = TearOff.DatabaseID;
					}
					return _DatabaseID_W;
				}
			}

			public WhereParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			public WhereParameter DatabaseName
		    {
				get
		        {
					if(_DatabaseName_W == null)
	        	    {
						_DatabaseName_W = TearOff.DatabaseName;
					}
					return _DatabaseName_W;
				}
			}

			public WhereParameter UserCount
		    {
				get
		        {
					if(_UserCount_W == null)
	        	    {
						_UserCount_W = TearOff.UserCount;
					}
					return _UserCount_W;
				}
			}

			private WhereParameter _OrganizationID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _Description_W = null;
			private WhereParameter _DatabaseID_W = null;
			private WhereParameter _IsDeleted_W = null;
			private WhereParameter _DatabaseName_W = null;
			private WhereParameter _UserCount_W = null;

			public void WhereClauseReset()
			{
				_OrganizationID_W = null;
				_Name_W = null;
				_Description_W = null;
				_DatabaseID_W = null;
				_IsDeleted_W = null;
				_DatabaseName_W = null;
				_UserCount_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter OrganizationID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrganizationID, Parameters.OrganizationID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DatabaseID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DatabaseID, Parameters.DatabaseID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsDeleted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DatabaseName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DatabaseName, Parameters.DatabaseName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserCount, Parameters.UserCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter OrganizationID
		    {
				get
		        {
					if(_OrganizationID_W == null)
	        	    {
						_OrganizationID_W = TearOff.OrganizationID;
					}
					return _OrganizationID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public AggregateParameter DatabaseID
		    {
				get
		        {
					if(_DatabaseID_W == null)
	        	    {
						_DatabaseID_W = TearOff.DatabaseID;
					}
					return _DatabaseID_W;
				}
			}

			public AggregateParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			public AggregateParameter DatabaseName
		    {
				get
		        {
					if(_DatabaseName_W == null)
	        	    {
						_DatabaseName_W = TearOff.DatabaseName;
					}
					return _DatabaseName_W;
				}
			}

			public AggregateParameter UserCount
		    {
				get
		        {
					if(_UserCount_W == null)
	        	    {
						_UserCount_W = TearOff.UserCount;
					}
					return _UserCount_W;
				}
			}

			private AggregateParameter _OrganizationID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _Description_W = null;
			private AggregateParameter _DatabaseID_W = null;
			private AggregateParameter _IsDeleted_W = null;
			private AggregateParameter _DatabaseName_W = null;
			private AggregateParameter _UserCount_W = null;

			public void AggregateClauseReset()
			{
				_OrganizationID_W = null;
				_Name_W = null;
				_Description_W = null;
				_DatabaseID_W = null;
				_IsDeleted_W = null;
				_DatabaseName_W = null;
				_UserCount_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
