
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.5.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DL_DAL.Master
{
	public abstract class _RoleAction : SqlClientEntity
	{
		public _RoleAction()
		{
			this.QuerySource = "RoleAction";
			this.MappingName = "RoleAction";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllRoleAction]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int RoleID, int ActionID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.RoleID, RoleID);

parameters.Add(Parameters.ActionID, ActionID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadRoleActionByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter RoleID
			{
				get
				{
					return new SqlParameter("@RoleID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ActionID
			{
				get
				{
					return new SqlParameter("@ActionID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string RoleID = "RoleID";
            public const string ActionID = "ActionID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[RoleID] = _RoleAction.PropertyNames.RoleID;
					ht[ActionID] = _RoleAction.PropertyNames.ActionID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string RoleID = "RoleID";
            public const string ActionID = "ActionID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[RoleID] = _RoleAction.ColumnNames.RoleID;
					ht[ActionID] = _RoleAction.ColumnNames.ActionID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string RoleID = "s_RoleID";
            public const string ActionID = "s_ActionID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int RoleID
	    {
			get
	        {
				return base.Getint(ColumnNames.RoleID);
			}
			set
	        {
				base.Setint(ColumnNames.RoleID, value);
			}
		}

		public virtual int ActionID
	    {
			get
	        {
				return base.Getint(ColumnNames.ActionID);
			}
			set
	        {
				base.Setint(ColumnNames.ActionID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_RoleID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RoleID) ? string.Empty : base.GetintAsString(ColumnNames.RoleID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RoleID);
				else
					this.RoleID = base.SetintAsString(ColumnNames.RoleID, value);
			}
		}

		public virtual string s_ActionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ActionID) ? string.Empty : base.GetintAsString(ColumnNames.ActionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ActionID);
				else
					this.ActionID = base.SetintAsString(ColumnNames.ActionID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter RoleID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RoleID, Parameters.RoleID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ActionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ActionID, Parameters.ActionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter RoleID
		    {
				get
		        {
					if(_RoleID_W == null)
	        	    {
						_RoleID_W = TearOff.RoleID;
					}
					return _RoleID_W;
				}
			}

			public WhereParameter ActionID
		    {
				get
		        {
					if(_ActionID_W == null)
	        	    {
						_ActionID_W = TearOff.ActionID;
					}
					return _ActionID_W;
				}
			}

			private WhereParameter _RoleID_W = null;
			private WhereParameter _ActionID_W = null;

			public void WhereClauseReset()
			{
				_RoleID_W = null;
				_ActionID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter RoleID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RoleID, Parameters.RoleID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ActionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActionID, Parameters.ActionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter RoleID
		    {
				get
		        {
					if(_RoleID_W == null)
	        	    {
						_RoleID_W = TearOff.RoleID;
					}
					return _RoleID_W;
				}
			}

			public AggregateParameter ActionID
		    {
				get
		        {
					if(_ActionID_W == null)
	        	    {
						_ActionID_W = TearOff.ActionID;
					}
					return _ActionID_W;
				}
			}

			private AggregateParameter _RoleID_W = null;
			private AggregateParameter _ActionID_W = null;

			public void AggregateClauseReset()
			{
				_RoleID_W = null;
				_ActionID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertRoleAction]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateRoleAction]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteRoleAction]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.RoleID);
			p.SourceColumn = ColumnNames.RoleID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ActionID);
			p.SourceColumn = ColumnNames.ActionID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.RoleID);
			p.SourceColumn = ColumnNames.RoleID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ActionID);
			p.SourceColumn = ColumnNames.ActionID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
