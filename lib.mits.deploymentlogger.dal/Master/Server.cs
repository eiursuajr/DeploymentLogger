
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.5.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DL_DAL.Master
{
	public abstract class _Server : SqlClientEntity
	{
		public _Server()
		{
			this.QuerySource = "Server";
			this.MappingName = "Server";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadAllServer]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ServerID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ServerID, ServerID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "LoadServerByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ServerID
			{
				get
				{
					return new SqlParameter("@ServerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MailHost
			{
				get
				{
					return new SqlParameter("@MailHost", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter MailUser
			{
				get
				{
					return new SqlParameter("@MailUser", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter MailPass
			{
				get
				{
					return new SqlParameter("@MailPass", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter MailEmail
			{
				get
				{
					return new SqlParameter("@MailEmail", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter WebReference
			{
				get
				{
					return new SqlParameter("@WebReference", SqlDbType.VarChar, 255);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ServerID = "ServerID";
            public const string MailHost = "mailHost";
            public const string MailUser = "mailUser";
            public const string MailPass = "mailPass";
            public const string MailEmail = "mailEmail";
            public const string WebReference = "WebReference";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ServerID] = _Server.PropertyNames.ServerID;
					ht[MailHost] = _Server.PropertyNames.MailHost;
					ht[MailUser] = _Server.PropertyNames.MailUser;
					ht[MailPass] = _Server.PropertyNames.MailPass;
					ht[MailEmail] = _Server.PropertyNames.MailEmail;
					ht[WebReference] = _Server.PropertyNames.WebReference;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ServerID = "ServerID";
            public const string MailHost = "MailHost";
            public const string MailUser = "MailUser";
            public const string MailPass = "MailPass";
            public const string MailEmail = "MailEmail";
            public const string WebReference = "WebReference";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ServerID] = _Server.ColumnNames.ServerID;
					ht[MailHost] = _Server.ColumnNames.MailHost;
					ht[MailUser] = _Server.ColumnNames.MailUser;
					ht[MailPass] = _Server.ColumnNames.MailPass;
					ht[MailEmail] = _Server.ColumnNames.MailEmail;
					ht[WebReference] = _Server.ColumnNames.WebReference;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ServerID = "s_ServerID";
            public const string MailHost = "s_MailHost";
            public const string MailUser = "s_MailUser";
            public const string MailPass = "s_MailPass";
            public const string MailEmail = "s_MailEmail";
            public const string WebReference = "s_WebReference";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ServerID
	    {
			get
	        {
				return base.Getint(ColumnNames.ServerID);
			}
			set
	        {
				base.Setint(ColumnNames.ServerID, value);
			}
		}

		public virtual string MailHost
	    {
			get
	        {
				return base.Getstring(ColumnNames.MailHost);
			}
			set
	        {
				base.Setstring(ColumnNames.MailHost, value);
			}
		}

		public virtual string MailUser
	    {
			get
	        {
				return base.Getstring(ColumnNames.MailUser);
			}
			set
	        {
				base.Setstring(ColumnNames.MailUser, value);
			}
		}

		public virtual string MailPass
	    {
			get
	        {
				return base.Getstring(ColumnNames.MailPass);
			}
			set
	        {
				base.Setstring(ColumnNames.MailPass, value);
			}
		}

		public virtual string MailEmail
	    {
			get
	        {
				return base.Getstring(ColumnNames.MailEmail);
			}
			set
	        {
				base.Setstring(ColumnNames.MailEmail, value);
			}
		}

		public virtual string WebReference
	    {
			get
	        {
				return base.Getstring(ColumnNames.WebReference);
			}
			set
	        {
				base.Setstring(ColumnNames.WebReference, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ServerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ServerID) ? string.Empty : base.GetintAsString(ColumnNames.ServerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ServerID);
				else
					this.ServerID = base.SetintAsString(ColumnNames.ServerID, value);
			}
		}

		public virtual string s_MailHost
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MailHost) ? string.Empty : base.GetstringAsString(ColumnNames.MailHost);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MailHost);
				else
					this.MailHost = base.SetstringAsString(ColumnNames.MailHost, value);
			}
		}

		public virtual string s_MailUser
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MailUser) ? string.Empty : base.GetstringAsString(ColumnNames.MailUser);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MailUser);
				else
					this.MailUser = base.SetstringAsString(ColumnNames.MailUser, value);
			}
		}

		public virtual string s_MailPass
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MailPass) ? string.Empty : base.GetstringAsString(ColumnNames.MailPass);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MailPass);
				else
					this.MailPass = base.SetstringAsString(ColumnNames.MailPass, value);
			}
		}

		public virtual string s_MailEmail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MailEmail) ? string.Empty : base.GetstringAsString(ColumnNames.MailEmail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MailEmail);
				else
					this.MailEmail = base.SetstringAsString(ColumnNames.MailEmail, value);
			}
		}

		public virtual string s_WebReference
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WebReference) ? string.Empty : base.GetstringAsString(ColumnNames.WebReference);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WebReference);
				else
					this.WebReference = base.SetstringAsString(ColumnNames.WebReference, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ServerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ServerID, Parameters.ServerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MailHost
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MailHost, Parameters.MailHost);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MailUser
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MailUser, Parameters.MailUser);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MailPass
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MailPass, Parameters.MailPass);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MailEmail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MailEmail, Parameters.MailEmail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WebReference
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WebReference, Parameters.WebReference);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ServerID
		    {
				get
		        {
					if(_ServerID_W == null)
	        	    {
						_ServerID_W = TearOff.ServerID;
					}
					return _ServerID_W;
				}
			}

			public WhereParameter MailHost
		    {
				get
		        {
					if(_MailHost_W == null)
	        	    {
						_MailHost_W = TearOff.MailHost;
					}
					return _MailHost_W;
				}
			}

			public WhereParameter MailUser
		    {
				get
		        {
					if(_MailUser_W == null)
	        	    {
						_MailUser_W = TearOff.MailUser;
					}
					return _MailUser_W;
				}
			}

			public WhereParameter MailPass
		    {
				get
		        {
					if(_MailPass_W == null)
	        	    {
						_MailPass_W = TearOff.MailPass;
					}
					return _MailPass_W;
				}
			}

			public WhereParameter MailEmail
		    {
				get
		        {
					if(_MailEmail_W == null)
	        	    {
						_MailEmail_W = TearOff.MailEmail;
					}
					return _MailEmail_W;
				}
			}

			public WhereParameter WebReference
		    {
				get
		        {
					if(_WebReference_W == null)
	        	    {
						_WebReference_W = TearOff.WebReference;
					}
					return _WebReference_W;
				}
			}

			private WhereParameter _ServerID_W = null;
			private WhereParameter _MailHost_W = null;
			private WhereParameter _MailUser_W = null;
			private WhereParameter _MailPass_W = null;
			private WhereParameter _MailEmail_W = null;
			private WhereParameter _WebReference_W = null;

			public void WhereClauseReset()
			{
				_ServerID_W = null;
				_MailHost_W = null;
				_MailUser_W = null;
				_MailPass_W = null;
				_MailEmail_W = null;
				_WebReference_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ServerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ServerID, Parameters.ServerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MailHost
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MailHost, Parameters.MailHost);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MailUser
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MailUser, Parameters.MailUser);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MailPass
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MailPass, Parameters.MailPass);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MailEmail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MailEmail, Parameters.MailEmail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WebReference
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WebReference, Parameters.WebReference);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ServerID
		    {
				get
		        {
					if(_ServerID_W == null)
	        	    {
						_ServerID_W = TearOff.ServerID;
					}
					return _ServerID_W;
				}
			}

			public AggregateParameter MailHost
		    {
				get
		        {
					if(_MailHost_W == null)
	        	    {
						_MailHost_W = TearOff.MailHost;
					}
					return _MailHost_W;
				}
			}

			public AggregateParameter MailUser
		    {
				get
		        {
					if(_MailUser_W == null)
	        	    {
						_MailUser_W = TearOff.MailUser;
					}
					return _MailUser_W;
				}
			}

			public AggregateParameter MailPass
		    {
				get
		        {
					if(_MailPass_W == null)
	        	    {
						_MailPass_W = TearOff.MailPass;
					}
					return _MailPass_W;
				}
			}

			public AggregateParameter MailEmail
		    {
				get
		        {
					if(_MailEmail_W == null)
	        	    {
						_MailEmail_W = TearOff.MailEmail;
					}
					return _MailEmail_W;
				}
			}

			public AggregateParameter WebReference
		    {
				get
		        {
					if(_WebReference_W == null)
	        	    {
						_WebReference_W = TearOff.WebReference;
					}
					return _WebReference_W;
				}
			}

			private AggregateParameter _ServerID_W = null;
			private AggregateParameter _MailHost_W = null;
			private AggregateParameter _MailUser_W = null;
			private AggregateParameter _MailPass_W = null;
			private AggregateParameter _MailEmail_W = null;
			private AggregateParameter _WebReference_W = null;

			public void AggregateClauseReset()
			{
				_ServerID_W = null;
				_MailHost_W = null;
				_MailUser_W = null;
				_MailPass_W = null;
				_MailEmail_W = null;
				_WebReference_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "InsertServer]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ServerID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "UpdateServer]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "DeleteServer]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ServerID);
			p.SourceColumn = ColumnNames.ServerID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ServerID);
			p.SourceColumn = ColumnNames.ServerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MailHost);
			p.SourceColumn = ColumnNames.MailHost;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MailUser);
			p.SourceColumn = ColumnNames.MailUser;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MailPass);
			p.SourceColumn = ColumnNames.MailPass;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MailEmail);
			p.SourceColumn = ColumnNames.MailEmail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WebReference);
			p.SourceColumn = ColumnNames.WebReference;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
